
STM32L152_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a78  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003bb4  08003bb4  00013bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c3c  08003c3c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c3c  08003c3c  00013c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c44  08003c44  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c44  08003c44  00013c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c48  08003c48  00013c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000005c  08003ca8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08003ca8  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009cf1  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001acc  00000000  00000000  00029db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  0002b888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000704  00000000  00000000  0002c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001510b  00000000  00000000  0002c8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b0bd  00000000  00000000  000419c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086f88  00000000  00000000  0004ca84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002aa8  00000000  00000000  000d3a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d64b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000005c 	.word	0x2000005c
 8000158:	00000000 	.word	0x00000000
 800015c:	08003b9c 	.word	0x08003b9c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000060 	.word	0x20000060
 8000178:	08003b9c 	.word	0x08003b9c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b972 	b.w	8000488 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	468e      	mov	lr, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14c      	bne.n	8000266 <__udivmoddi4+0xaa>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d967      	bls.n	80002a2 <__udivmoddi4+0xe6>
 80001d2:	fab2 f382 	clz	r3, r2
 80001d6:	b153      	cbz	r3, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001dc:	f1c3 0220 	rsb	r2, r3, #32
 80001e0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001e4:	fa20 f202 	lsr.w	r2, r0, r2
 80001e8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001ec:	409c      	lsls	r4, r3
 80001ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001f2:	fbbe f1f7 	udiv	r1, lr, r7
 80001f6:	fa1f f58c 	uxth.w	r5, ip
 80001fa:	fb07 ee11 	mls	lr, r7, r1, lr
 80001fe:	fb01 f005 	mul.w	r0, r1, r5
 8000202:	0c22      	lsrs	r2, r4, #16
 8000204:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000208:	4290      	cmp	r0, r2
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0202 	adds.w	r2, ip, r2
 8000210:	f101 3eff 	add.w	lr, r1, #4294967295
 8000214:	f080 8119 	bcs.w	800044a <__udivmoddi4+0x28e>
 8000218:	4290      	cmp	r0, r2
 800021a:	f240 8116 	bls.w	800044a <__udivmoddi4+0x28e>
 800021e:	3902      	subs	r1, #2
 8000220:	4462      	add	r2, ip
 8000222:	1a12      	subs	r2, r2, r0
 8000224:	fbb2 f0f7 	udiv	r0, r2, r7
 8000228:	fb07 2210 	mls	r2, r7, r0, r2
 800022c:	fb00 f505 	mul.w	r5, r0, r5
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000236:	42a5      	cmp	r5, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000242:	f080 8104 	bcs.w	800044e <__udivmoddi4+0x292>
 8000246:	42a5      	cmp	r5, r4
 8000248:	f240 8101 	bls.w	800044e <__udivmoddi4+0x292>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000254:	2100      	movs	r1, #0
 8000256:	1b64      	subs	r4, r4, r5
 8000258:	b11e      	cbz	r6, 8000262 <__udivmoddi4+0xa6>
 800025a:	40dc      	lsrs	r4, r3
 800025c:	2300      	movs	r3, #0
 800025e:	e9c6 4300 	strd	r4, r3, [r6]
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d908      	bls.n	800027c <__udivmoddi4+0xc0>
 800026a:	2e00      	cmp	r6, #0
 800026c:	f000 80ea 	beq.w	8000444 <__udivmoddi4+0x288>
 8000270:	2100      	movs	r1, #0
 8000272:	e9c6 0500 	strd	r0, r5, [r6]
 8000276:	4608      	mov	r0, r1
 8000278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027c:	fab3 f183 	clz	r1, r3
 8000280:	2900      	cmp	r1, #0
 8000282:	d148      	bne.n	8000316 <__udivmoddi4+0x15a>
 8000284:	42ab      	cmp	r3, r5
 8000286:	d302      	bcc.n	800028e <__udivmoddi4+0xd2>
 8000288:	4282      	cmp	r2, r0
 800028a:	f200 80f8 	bhi.w	800047e <__udivmoddi4+0x2c2>
 800028e:	1a84      	subs	r4, r0, r2
 8000290:	eb65 0203 	sbc.w	r2, r5, r3
 8000294:	2001      	movs	r0, #1
 8000296:	4696      	mov	lr, r2
 8000298:	2e00      	cmp	r6, #0
 800029a:	d0e2      	beq.n	8000262 <__udivmoddi4+0xa6>
 800029c:	e9c6 4e00 	strd	r4, lr, [r6]
 80002a0:	e7df      	b.n	8000262 <__udivmoddi4+0xa6>
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xea>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f382 	clz	r3, r2
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 808e 	bne.w	80003cc <__udivmoddi4+0x210>
 80002b0:	1a88      	subs	r0, r1, r2
 80002b2:	2101      	movs	r1, #1
 80002b4:	0c17      	lsrs	r7, r2, #16
 80002b6:	fa1f fe82 	uxth.w	lr, r2
 80002ba:	fbb0 f5f7 	udiv	r5, r0, r7
 80002be:	fb07 0015 	mls	r0, r7, r5, r0
 80002c2:	0c22      	lsrs	r2, r4, #16
 80002c4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002c8:	fb0e f005 	mul.w	r0, lr, r5
 80002cc:	4290      	cmp	r0, r2
 80002ce:	d908      	bls.n	80002e2 <__udivmoddi4+0x126>
 80002d0:	eb1c 0202 	adds.w	r2, ip, r2
 80002d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002d8:	d202      	bcs.n	80002e0 <__udivmoddi4+0x124>
 80002da:	4290      	cmp	r0, r2
 80002dc:	f200 80cc 	bhi.w	8000478 <__udivmoddi4+0x2bc>
 80002e0:	4645      	mov	r5, r8
 80002e2:	1a12      	subs	r2, r2, r0
 80002e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002e8:	fb07 2210 	mls	r2, r7, r0, r2
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	b2a4      	uxth	r4, r4
 80002f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0x150>
 80002fa:	eb1c 0404 	adds.w	r4, ip, r4
 80002fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x14e>
 8000304:	45a6      	cmp	lr, r4
 8000306:	f200 80b4 	bhi.w	8000472 <__udivmoddi4+0x2b6>
 800030a:	4610      	mov	r0, r2
 800030c:	eba4 040e 	sub.w	r4, r4, lr
 8000310:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000314:	e7a0      	b.n	8000258 <__udivmoddi4+0x9c>
 8000316:	f1c1 0720 	rsb	r7, r1, #32
 800031a:	408b      	lsls	r3, r1
 800031c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000320:	ea4c 0c03 	orr.w	ip, ip, r3
 8000324:	fa25 fa07 	lsr.w	sl, r5, r7
 8000328:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032c:	fbba f8f9 	udiv	r8, sl, r9
 8000330:	408d      	lsls	r5, r1
 8000332:	fa20 f307 	lsr.w	r3, r0, r7
 8000336:	fb09 aa18 	mls	sl, r9, r8, sl
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	432b      	orrs	r3, r5
 8000340:	fa00 f501 	lsl.w	r5, r0, r1
 8000344:	fb08 f00e 	mul.w	r0, r8, lr
 8000348:	0c1c      	lsrs	r4, r3, #16
 800034a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800034e:	42a0      	cmp	r0, r4
 8000350:	fa02 f201 	lsl.w	r2, r2, r1
 8000354:	d90b      	bls.n	800036e <__udivmoddi4+0x1b2>
 8000356:	eb1c 0404 	adds.w	r4, ip, r4
 800035a:	f108 3aff 	add.w	sl, r8, #4294967295
 800035e:	f080 8086 	bcs.w	800046e <__udivmoddi4+0x2b2>
 8000362:	42a0      	cmp	r0, r4
 8000364:	f240 8083 	bls.w	800046e <__udivmoddi4+0x2b2>
 8000368:	f1a8 0802 	sub.w	r8, r8, #2
 800036c:	4464      	add	r4, ip
 800036e:	1a24      	subs	r4, r4, r0
 8000370:	b298      	uxth	r0, r3
 8000372:	fbb4 f3f9 	udiv	r3, r4, r9
 8000376:	fb09 4413 	mls	r4, r9, r3, r4
 800037a:	fb03 fe0e 	mul.w	lr, r3, lr
 800037e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000382:	45a6      	cmp	lr, r4
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x1dc>
 8000386:	eb1c 0404 	adds.w	r4, ip, r4
 800038a:	f103 30ff 	add.w	r0, r3, #4294967295
 800038e:	d26a      	bcs.n	8000466 <__udivmoddi4+0x2aa>
 8000390:	45a6      	cmp	lr, r4
 8000392:	d968      	bls.n	8000466 <__udivmoddi4+0x2aa>
 8000394:	3b02      	subs	r3, #2
 8000396:	4464      	add	r4, ip
 8000398:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800039c:	fba0 9302 	umull	r9, r3, r0, r2
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	429c      	cmp	r4, r3
 80003a6:	46c8      	mov	r8, r9
 80003a8:	469e      	mov	lr, r3
 80003aa:	d354      	bcc.n	8000456 <__udivmoddi4+0x29a>
 80003ac:	d051      	beq.n	8000452 <__udivmoddi4+0x296>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d067      	beq.n	8000482 <__udivmoddi4+0x2c6>
 80003b2:	ebb5 0308 	subs.w	r3, r5, r8
 80003b6:	eb64 040e 	sbc.w	r4, r4, lr
 80003ba:	40cb      	lsrs	r3, r1
 80003bc:	fa04 f707 	lsl.w	r7, r4, r7
 80003c0:	431f      	orrs	r7, r3
 80003c2:	40cc      	lsrs	r4, r1
 80003c4:	e9c6 7400 	strd	r7, r4, [r6]
 80003c8:	2100      	movs	r1, #0
 80003ca:	e74a      	b.n	8000262 <__udivmoddi4+0xa6>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0020 	rsb	r0, r3, #32
 80003d4:	40c1      	lsrs	r1, r0
 80003d6:	409d      	lsls	r5, r3
 80003d8:	fa24 f000 	lsr.w	r0, r4, r0
 80003dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e0:	4328      	orrs	r0, r5
 80003e2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003e6:	fb07 1115 	mls	r1, r7, r5, r1
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	0c02      	lsrs	r2, r0, #16
 80003f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003f4:	fb05 f10e 	mul.w	r1, r5, lr
 80003f8:	4291      	cmp	r1, r2
 80003fa:	fa04 f403 	lsl.w	r4, r4, r3
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x256>
 8000400:	eb1c 0202 	adds.w	r2, ip, r2
 8000404:	f105 38ff 	add.w	r8, r5, #4294967295
 8000408:	d22f      	bcs.n	800046a <__udivmoddi4+0x2ae>
 800040a:	4291      	cmp	r1, r2
 800040c:	d92d      	bls.n	800046a <__udivmoddi4+0x2ae>
 800040e:	3d02      	subs	r5, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a52      	subs	r2, r2, r1
 8000414:	fbb2 f1f7 	udiv	r1, r2, r7
 8000418:	fb07 2211 	mls	r2, r7, r1, r2
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000422:	fb01 f20e 	mul.w	r2, r1, lr
 8000426:	4282      	cmp	r2, r0
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x280>
 800042a:	eb1c 0000 	adds.w	r0, ip, r0
 800042e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000432:	d216      	bcs.n	8000462 <__udivmoddi4+0x2a6>
 8000434:	4282      	cmp	r2, r0
 8000436:	d914      	bls.n	8000462 <__udivmoddi4+0x2a6>
 8000438:	3902      	subs	r1, #2
 800043a:	4460      	add	r0, ip
 800043c:	1a80      	subs	r0, r0, r2
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	e73a      	b.n	80002ba <__udivmoddi4+0xfe>
 8000444:	4631      	mov	r1, r6
 8000446:	4630      	mov	r0, r6
 8000448:	e70b      	b.n	8000262 <__udivmoddi4+0xa6>
 800044a:	4671      	mov	r1, lr
 800044c:	e6e9      	b.n	8000222 <__udivmoddi4+0x66>
 800044e:	4610      	mov	r0, r2
 8000450:	e6fe      	b.n	8000250 <__udivmoddi4+0x94>
 8000452:	454d      	cmp	r5, r9
 8000454:	d2ab      	bcs.n	80003ae <__udivmoddi4+0x1f2>
 8000456:	ebb9 0802 	subs.w	r8, r9, r2
 800045a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800045e:	3801      	subs	r0, #1
 8000460:	e7a5      	b.n	80003ae <__udivmoddi4+0x1f2>
 8000462:	4641      	mov	r1, r8
 8000464:	e7ea      	b.n	800043c <__udivmoddi4+0x280>
 8000466:	4603      	mov	r3, r0
 8000468:	e796      	b.n	8000398 <__udivmoddi4+0x1dc>
 800046a:	4645      	mov	r5, r8
 800046c:	e7d1      	b.n	8000412 <__udivmoddi4+0x256>
 800046e:	46d0      	mov	r8, sl
 8000470:	e77d      	b.n	800036e <__udivmoddi4+0x1b2>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e749      	b.n	800030c <__udivmoddi4+0x150>
 8000478:	3d02      	subs	r5, #2
 800047a:	4462      	add	r2, ip
 800047c:	e731      	b.n	80002e2 <__udivmoddi4+0x126>
 800047e:	4608      	mov	r0, r1
 8000480:	e70a      	b.n	8000298 <__udivmoddi4+0xdc>
 8000482:	4631      	mov	r1, r6
 8000484:	e6ed      	b.n	8000262 <__udivmoddi4+0xa6>
 8000486:	bf00      	nop

08000488 <__aeabi_idiv0>:
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b098      	sub	sp, #96	; 0x60
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000492:	f000 faea 	bl	8000a6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000496:	f000 f8af 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049a:	f000 f95b 	bl	8000754 <MX_GPIO_Init>
  MX_SPI1_Init();
 800049e:	f000 f8f9 	bl	8000694 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80004a2:	f000 f92d 	bl	8000700 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ac:	484a      	ldr	r0, [pc, #296]	; (80005d8 <main+0x14c>)
 80004ae:	f000 fde1 	bl	8001074 <HAL_GPIO_WritePin>
  int ret;
  ret = CANSPI_Initialize();
 80004b2:	f002 fba3 	bl	8002bfc <CANSPI_Initialize>
 80004b6:	6578      	str	r0, [r7, #84]	; 0x54
  if(ret < 0)
 80004b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	da06      	bge.n	80004cc <main+0x40>
  {
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c4:	4844      	ldr	r0, [pc, #272]	; (80005d8 <main+0x14c>)
 80004c6:	f000 fdd5 	bl	8001074 <HAL_GPIO_WritePin>
	  while(1){}
 80004ca:	e7fe      	b.n	80004ca <main+0x3e>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (CANSPI_Receive(&rxMessage))
 80004cc:	4843      	ldr	r0, [pc, #268]	; (80005dc <main+0x150>)
 80004ce:	f002 fc48 	bl	8002d62 <CANSPI_Receive>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d0f9      	beq.n	80004cc <main+0x40>
		{

			if (rxMessage.frame.id == 0x7E8)
 80004d8:	4b40      	ldr	r3, [pc, #256]	; (80005dc <main+0x150>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 80004e0:	d12d      	bne.n	800053e <main+0xb2>
			{
				if(rxMessage.frame.data0 == 03)
 80004e2:	4b3e      	ldr	r3, [pc, #248]	; (80005dc <main+0x150>)
 80004e4:	7a5b      	ldrb	r3, [r3, #9]
 80004e6:	2b03      	cmp	r3, #3
 80004e8:	d129      	bne.n	800053e <main+0xb2>
				{
					if (rxMessage.frame.data1 == 41)
 80004ea:	4b3c      	ldr	r3, [pc, #240]	; (80005dc <main+0x150>)
 80004ec:	7a9b      	ldrb	r3, [r3, #10]
 80004ee:	2b29      	cmp	r3, #41	; 0x29
 80004f0:	d125      	bne.n	800053e <main+0xb2>
					{
						if(rxMessage.frame.data2 == 0x0C)
 80004f2:	4b3a      	ldr	r3, [pc, #232]	; (80005dc <main+0x150>)
 80004f4:	7adb      	ldrb	r3, [r3, #11]
 80004f6:	2b0c      	cmp	r3, #12
 80004f8:	d121      	bne.n	800053e <main+0xb2>
						{
							char rpmString[16];
							uint16_t RPM = (((rxMessage.frame.data3) * 256) + (rxMessage.frame.data4)) / 4;
 80004fa:	4b38      	ldr	r3, [pc, #224]	; (80005dc <main+0x150>)
 80004fc:	7b1b      	ldrb	r3, [r3, #12]
 80004fe:	021b      	lsls	r3, r3, #8
 8000500:	4a36      	ldr	r2, [pc, #216]	; (80005dc <main+0x150>)
 8000502:	7b52      	ldrb	r2, [r2, #13]
 8000504:	4413      	add	r3, r2
 8000506:	2b00      	cmp	r3, #0
 8000508:	da00      	bge.n	800050c <main+0x80>
 800050a:	3303      	adds	r3, #3
 800050c:	109b      	asrs	r3, r3, #2
 800050e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
							snprintf(rpmString, sizeof(rpmString), "RPM:%d\r\n", RPM); // Convert RPM to string
 8000512:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000516:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800051a:	4a31      	ldr	r2, [pc, #196]	; (80005e0 <main+0x154>)
 800051c:	2110      	movs	r1, #16
 800051e:	f002 fe57 	bl	80031d0 <sniprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)rpmString, strlen(rpmString), HAL_MAX_DELAY);
 8000522:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff fe28 	bl	800017c <strlen>
 800052c:	4603      	mov	r3, r0
 800052e:	b29a      	uxth	r2, r3
 8000530:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000534:	f04f 33ff 	mov.w	r3, #4294967295
 8000538:	482a      	ldr	r0, [pc, #168]	; (80005e4 <main+0x158>)
 800053a:	f002 f989 	bl	8002850 <HAL_UART_Transmit>
//				HAL_UART_Transmit(&huart2, (uint8_t*)rpmString, strlen(rpmString), HAL_MAX_DELAY);
			}

			/* Debug Print vai UART2 */
			char frame[60]; // Make it large enough to hold the combined string
			int frame_length = sprintf(frame, "ID:%04X, DLC:%X, Data:", rxMessage.frame.id, rxMessage.frame.dlc);
 800053e:	4b27      	ldr	r3, [pc, #156]	; (80005dc <main+0x150>)
 8000540:	685a      	ldr	r2, [r3, #4]
 8000542:	4b26      	ldr	r3, [pc, #152]	; (80005dc <main+0x150>)
 8000544:	7a1b      	ldrb	r3, [r3, #8]
 8000546:	1d38      	adds	r0, r7, #4
 8000548:	4927      	ldr	r1, [pc, #156]	; (80005e8 <main+0x15c>)
 800054a:	f002 fe75 	bl	8003238 <siprintf>
 800054e:	65f8      	str	r0, [r7, #92]	; 0x5c
			for (int i = 0; i < rxMessage.frame.dlc; i++) {
 8000550:	2300      	movs	r3, #0
 8000552:	65bb      	str	r3, [r7, #88]	; 0x58
 8000554:	e011      	b.n	800057a <main+0xee>
			    frame_length += sprintf(frame + frame_length, " %02X", *((uint8_t *)&rxMessage.frame.data0 + i));
 8000556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000558:	1d3a      	adds	r2, r7, #4
 800055a:	18d0      	adds	r0, r2, r3
 800055c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800055e:	4a23      	ldr	r2, [pc, #140]	; (80005ec <main+0x160>)
 8000560:	4413      	add	r3, r2
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	4922      	ldr	r1, [pc, #136]	; (80005f0 <main+0x164>)
 8000568:	f002 fe66 	bl	8003238 <siprintf>
 800056c:	4602      	mov	r2, r0
 800056e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000570:	4413      	add	r3, r2
 8000572:	65fb      	str	r3, [r7, #92]	; 0x5c
			for (int i = 0; i < rxMessage.frame.dlc; i++) {
 8000574:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000576:	3301      	adds	r3, #1
 8000578:	65bb      	str	r3, [r7, #88]	; 0x58
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <main+0x150>)
 800057c:	7a1b      	ldrb	r3, [r3, #8]
 800057e:	461a      	mov	r2, r3
 8000580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000582:	4293      	cmp	r3, r2
 8000584:	dbe7      	blt.n	8000556 <main+0xca>
			}
			frame_length += sprintf(frame + frame_length, "\r\n");
 8000586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000588:	1d3a      	adds	r2, r7, #4
 800058a:	4413      	add	r3, r2
 800058c:	4919      	ldr	r1, [pc, #100]	; (80005f4 <main+0x168>)
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fe52 	bl	8003238 <siprintf>
 8000594:	4602      	mov	r2, r0
 8000596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000598:	4413      	add	r3, r2
 800059a:	65fb      	str	r3, [r7, #92]	; 0x5c
			HAL_UART_Transmit(&huart2, (uint8_t *)frame, frame_length, HAL_MAX_DELAY);
 800059c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800059e:	b29a      	uxth	r2, r3
 80005a0:	1d39      	adds	r1, r7, #4
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	480f      	ldr	r0, [pc, #60]	; (80005e4 <main+0x158>)
 80005a8:	f002 f952 	bl	8002850 <HAL_UART_Transmit>
			HAL_Delay(50);
 80005ac:	2032      	movs	r0, #50	; 0x32
 80005ae:	f000 facb 	bl	8000b48 <HAL_Delay>
			/*-----------------------*/
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b8:	4807      	ldr	r0, [pc, #28]	; (80005d8 <main+0x14c>)
 80005ba:	f000 fd5b 	bl	8001074 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 80005be:	2032      	movs	r0, #50	; 0x32
 80005c0:	f000 fac2 	bl	8000b48 <HAL_Delay>
//			txMessage.frame.data4 = 4;
//			txMessage.frame.data5 = 5;
//			txMessage.frame.data6 = 6;
//			txMessage.frame.data7 = 7;
//			CANSPI_Transmit(&txMessage);
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ca:	4803      	ldr	r0, [pc, #12]	; (80005d8 <main+0x14c>)
 80005cc:	f000 fd52 	bl	8001074 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80005d0:	2064      	movs	r0, #100	; 0x64
 80005d2:	f000 fab9 	bl	8000b48 <HAL_Delay>
		if (CANSPI_Receive(&rxMessage))
 80005d6:	e779      	b.n	80004cc <main+0x40>
 80005d8:	40020000 	.word	0x40020000
 80005dc:	20000118 	.word	0x20000118
 80005e0:	08003bb4 	.word	0x08003bb4
 80005e4:	200000d0 	.word	0x200000d0
 80005e8:	08003bc0 	.word	0x08003bc0
 80005ec:	20000121 	.word	0x20000121
 80005f0:	08003bd8 	.word	0x08003bd8
 80005f4:	08003be0 	.word	0x08003be0

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b092      	sub	sp, #72	; 0x48
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2234      	movs	r2, #52	; 0x34
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f002 fe36 	bl	8003278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061a:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <SystemClock_Config+0x98>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000622:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <SystemClock_Config+0x98>)
 8000624:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000628:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062a:	2302      	movs	r3, #2
 800062c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062e:	2301      	movs	r3, #1
 8000630:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000632:	2310      	movs	r3, #16
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063a:	2300      	movs	r3, #0
 800063c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800063e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000644:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000648:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fd28 	bl	80010a4 <HAL_RCC_OscConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800065a:	f000 f8c1 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2303      	movs	r3, #3
 8000664:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000672:	463b      	mov	r3, r7
 8000674:	2101      	movs	r1, #1
 8000676:	4618      	mov	r0, r3
 8000678:	f001 f844 	bl	8001704 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000682:	f000 f8ad 	bl	80007e0 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3748      	adds	r7, #72	; 0x48
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40007000 	.word	0x40007000

08000694 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_SPI1_Init+0x64>)
 800069a:	4a18      	ldr	r2, [pc, #96]	; (80006fc <MX_SPI1_Init+0x68>)
 800069c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006e0:	220a      	movs	r2, #10
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006e6:	f001 fa91 	bl	8001c0c <HAL_SPI_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f0:	f000 f876 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000078 	.word	0x20000078
 80006fc:	40013000 	.word	0x40013000

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_USART2_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800070c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000738:	f002 f83a 	bl	80027b0 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 f84d 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000d0 	.word	0x200000d0
 8000750:	40004400 	.word	0x40004400

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_GPIO_Init+0x84>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a1a      	ldr	r2, [pc, #104]	; (80007d8 <MX_GPIO_Init+0x84>)
 8000770:	f043 0320 	orr.w	r3, r3, #32
 8000774:	61d3      	str	r3, [r2, #28]
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_GPIO_Init+0x84>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f003 0320 	and.w	r3, r3, #32
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_GPIO_Init+0x84>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a14      	ldr	r2, [pc, #80]	; (80007d8 <MX_GPIO_Init+0x84>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_GPIO_Init+0x84>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	480e      	ldr	r0, [pc, #56]	; (80007dc <MX_GPIO_Init+0x88>)
 80007a2:	f000 fc67 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ac:	480b      	ldr	r0, [pc, #44]	; (80007dc <MX_GPIO_Init+0x88>)
 80007ae:	f000 fc61 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CS_Pin LED_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|LED_Pin;
 80007b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4619      	mov	r1, r3
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_GPIO_Init+0x88>)
 80007cc:	f000 fac2 	bl	8000d54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020000 	.word	0x40020000

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <HAL_MspInit+0x58>)
 80007f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f6:	4a13      	ldr	r2, [pc, #76]	; (8000844 <HAL_MspInit+0x58>)
 80007f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007fc:	6253      	str	r3, [r2, #36]	; 0x24
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <HAL_MspInit+0x58>)
 8000800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <HAL_MspInit+0x58>)
 800080c:	6a1b      	ldr	r3, [r3, #32]
 800080e:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <HAL_MspInit+0x58>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6213      	str	r3, [r2, #32]
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <HAL_MspInit+0x58>)
 8000818:	6a1b      	ldr	r3, [r3, #32]
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_MspInit+0x58>)
 8000824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000826:	4a07      	ldr	r2, [pc, #28]	; (8000844 <HAL_MspInit+0x58>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082c:	6253      	str	r3, [r2, #36]	; 0x24
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_MspInit+0x58>)
 8000830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	bf00      	nop
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	40023800 	.word	0x40023800

08000848 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <HAL_SPI_MspInit+0x7c>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d127      	bne.n	80008ba <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 800086c:	6a1b      	ldr	r3, [r3, #32]
 800086e:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000870:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000874:	6213      	str	r3, [r2, #32]
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000878:	6a1b      	ldr	r3, [r3, #32]
 800087a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	61d3      	str	r3, [r2, #28]
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800089a:	23e0      	movs	r3, #224	; 0xe0
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008aa:	2305      	movs	r3, #5
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <HAL_SPI_MspInit+0x84>)
 80008b6:	f000 fa4d 	bl	8000d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008ba:	bf00      	nop
 80008bc:	3728      	adds	r7, #40	; 0x28
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40013000 	.word	0x40013000
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000

080008d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a17      	ldr	r2, [pc, #92]	; (800094c <HAL_UART_MspInit+0x7c>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d127      	bne.n	8000942 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <HAL_UART_MspInit+0x80>)
 80008f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f6:	4a16      	ldr	r2, [pc, #88]	; (8000950 <HAL_UART_MspInit+0x80>)
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fc:	6253      	str	r3, [r2, #36]	; 0x24
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <HAL_UART_MspInit+0x80>)
 8000900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <HAL_UART_MspInit+0x80>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	4a10      	ldr	r2, [pc, #64]	; (8000950 <HAL_UART_MspInit+0x80>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	61d3      	str	r3, [r2, #28]
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <HAL_UART_MspInit+0x80>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000922:	230c      	movs	r3, #12
 8000924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092e:	2303      	movs	r3, #3
 8000930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000932:	2307      	movs	r3, #7
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <HAL_UART_MspInit+0x84>)
 800093e:	f000 fa09 	bl	8000d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	3728      	adds	r7, #40	; 0x28
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40004400 	.word	0x40004400
 8000950:	40023800 	.word	0x40023800
 8000954:	40020000 	.word	0x40020000

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800095c:	e7fe      	b.n	800095c <NMI_Handler+0x4>

0800095e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <MemManage_Handler+0x4>

0800096a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <UsageFault_Handler+0x4>

08000976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr

08000982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr

0800098e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr

0800099a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099e:	f000 f8b7 	bl	8000b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b0:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <_sbrk+0x5c>)
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <_sbrk+0x60>)
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <_sbrk+0x64>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d102      	bne.n	80009ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <_sbrk+0x64>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <_sbrk+0x68>)
 80009c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d207      	bcs.n	80009e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d8:	f002 fc56 	bl	8003288 <__errno>
 80009dc:	4603      	mov	r3, r0
 80009de:	220c      	movs	r2, #12
 80009e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	e009      	b.n	80009fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <_sbrk+0x64>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <_sbrk+0x64>)
 80009f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009fa:	68fb      	ldr	r3, [r7, #12]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20014000 	.word	0x20014000
 8000a08:	00000400 	.word	0x00000400
 8000a0c:	2000012c 	.word	0x2000012c
 8000a10:	20000280 	.word	0x20000280

08000a14 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a20:	f7ff fff8 	bl	8000a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a26:	490c      	ldr	r1, [pc, #48]	; (8000a58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a28:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a09      	ldr	r2, [pc, #36]	; (8000a60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a3c:	4c09      	ldr	r4, [pc, #36]	; (8000a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f002 fc23 	bl	8003294 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a4e:	f7ff fd1d 	bl	800048c <main>
  bx lr
 8000a52:	4770      	bx	lr
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a5c:	08003c4c 	.word	0x08003c4c
  ldr r2, =_sbss
 8000a60:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a64:	2000027c 	.word	0x2000027c

08000a68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC1_IRQHandler>

08000a6a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 f939 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a7a:	200f      	movs	r0, #15
 8000a7c:	f000 f80e 	bl	8000a9c <HAL_InitTick>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d002      	beq.n	8000a8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	71fb      	strb	r3, [r7, #7]
 8000a8a:	e001      	b.n	8000a90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a8c:	f7ff feae 	bl	80007ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a90:	79fb      	ldrb	r3, [r7, #7]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <HAL_InitTick+0x68>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d022      	beq.n	8000af6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <HAL_InitTick+0x6c>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <HAL_InitTick+0x68>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000abc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 f938 	bl	8000d3a <HAL_SYSTICK_Config>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d10f      	bne.n	8000af0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b0f      	cmp	r3, #15
 8000ad4:	d809      	bhi.n	8000aea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	6879      	ldr	r1, [r7, #4]
 8000ada:	f04f 30ff 	mov.w	r0, #4294967295
 8000ade:	f000 f910 	bl	8000d02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <HAL_InitTick+0x70>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	e007      	b.n	8000afa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	73fb      	strb	r3, [r7, #15]
 8000aee:	e004      	b.n	8000afa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	73fb      	strb	r3, [r7, #15]
 8000af4:	e001      	b.n	8000afa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000004 	.word	0x20000004

08000b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_IncTick+0x1c>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_IncTick+0x20>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a03      	ldr	r2, [pc, #12]	; (8000b2c <HAL_IncTick+0x1c>)
 8000b20:	6013      	str	r3, [r2, #0]
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000130 	.word	0x20000130
 8000b30:	20000008 	.word	0x20000008

08000b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b02      	ldr	r3, [pc, #8]	; (8000b44 <HAL_GetTick+0x10>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	20000130 	.word	0x20000130

08000b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b50:	f7ff fff0 	bl	8000b34 <HAL_GetTick>
 8000b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b60:	d004      	beq.n	8000b6c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_Delay+0x40>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	4413      	add	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b6c:	bf00      	nop
 8000b6e:	f7ff ffe1 	bl	8000b34 <HAL_GetTick>
 8000b72:	4602      	mov	r2, r0
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d8f7      	bhi.n	8000b6e <HAL_Delay+0x26>
  {
  }
}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000008 	.word	0x20000008

08000b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bbe:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	60d3      	str	r3, [r2, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <__NVIC_GetPriorityGrouping+0x18>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	f003 0307 	and.w	r3, r3, #7
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db0a      	blt.n	8000c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	490c      	ldr	r1, [pc, #48]	; (8000c3c <__NVIC_SetPriority+0x4c>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	0112      	lsls	r2, r2, #4
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	440b      	add	r3, r1
 8000c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c18:	e00a      	b.n	8000c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4908      	ldr	r1, [pc, #32]	; (8000c40 <__NVIC_SetPriority+0x50>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	3b04      	subs	r3, #4
 8000c28:	0112      	lsls	r2, r2, #4
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	761a      	strb	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	; 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f1c3 0307 	rsb	r3, r3, #7
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	bf28      	it	cs
 8000c62:	2304      	movcs	r3, #4
 8000c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d902      	bls.n	8000c74 <NVIC_EncodePriority+0x30>
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3b03      	subs	r3, #3
 8000c72:	e000      	b.n	8000c76 <NVIC_EncodePriority+0x32>
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43da      	mvns	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	43d9      	mvns	r1, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	4313      	orrs	r3, r2
         );
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3724      	adds	r7, #36	; 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb8:	d301      	bcc.n	8000cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00f      	b.n	8000cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <SysTick_Config+0x40>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f7ff ff90 	bl	8000bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd8:	2207      	movs	r2, #7
 8000cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	e000e010 	.word	0xe000e010

08000cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff49 	bl	8000b8c <__NVIC_SetPriorityGrouping>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d14:	f7ff ff5e 	bl	8000bd4 <__NVIC_GetPriorityGrouping>
 8000d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	68b9      	ldr	r1, [r7, #8]
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	f7ff ff90 	bl	8000c44 <NVIC_EncodePriority>
 8000d24:	4602      	mov	r2, r0
 8000d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff5f 	bl	8000bf0 <__NVIC_SetPriority>
}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ffb0 	bl	8000ca8 <SysTick_Config>
 8000d48:	4603      	mov	r3, r0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b087      	sub	sp, #28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d6a:	e160      	b.n	800102e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	2101      	movs	r1, #1
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	fa01 f303 	lsl.w	r3, r1, r3
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 8152 	beq.w	8001028 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d005      	beq.n	8000d9c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d130      	bne.n	8000dfe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	091b      	lsrs	r3, r3, #4
 8000de8:	f003 0201 	and.w	r2, r3, #1
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d017      	beq.n	8000e3a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d123      	bne.n	8000e8e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	08da      	lsrs	r2, r3, #3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3208      	adds	r2, #8
 8000e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e52:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	220f      	movs	r2, #15
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	691a      	ldr	r2, [r3, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f003 0307 	and.w	r3, r3, #7
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	6939      	ldr	r1, [r7, #16]
 8000e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0203 	and.w	r2, r3, #3
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 80ac 	beq.w	8001028 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed0:	4b5e      	ldr	r3, [pc, #376]	; (800104c <HAL_GPIO_Init+0x2f8>)
 8000ed2:	6a1b      	ldr	r3, [r3, #32]
 8000ed4:	4a5d      	ldr	r2, [pc, #372]	; (800104c <HAL_GPIO_Init+0x2f8>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6213      	str	r3, [r2, #32]
 8000edc:	4b5b      	ldr	r3, [pc, #364]	; (800104c <HAL_GPIO_Init+0x2f8>)
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ee8:	4a59      	ldr	r2, [pc, #356]	; (8001050 <HAL_GPIO_Init+0x2fc>)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a51      	ldr	r2, [pc, #324]	; (8001054 <HAL_GPIO_Init+0x300>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d025      	beq.n	8000f60 <HAL_GPIO_Init+0x20c>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a50      	ldr	r2, [pc, #320]	; (8001058 <HAL_GPIO_Init+0x304>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d01f      	beq.n	8000f5c <HAL_GPIO_Init+0x208>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a4f      	ldr	r2, [pc, #316]	; (800105c <HAL_GPIO_Init+0x308>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d019      	beq.n	8000f58 <HAL_GPIO_Init+0x204>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a4e      	ldr	r2, [pc, #312]	; (8001060 <HAL_GPIO_Init+0x30c>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d013      	beq.n	8000f54 <HAL_GPIO_Init+0x200>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a4d      	ldr	r2, [pc, #308]	; (8001064 <HAL_GPIO_Init+0x310>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d00d      	beq.n	8000f50 <HAL_GPIO_Init+0x1fc>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a4c      	ldr	r2, [pc, #304]	; (8001068 <HAL_GPIO_Init+0x314>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d007      	beq.n	8000f4c <HAL_GPIO_Init+0x1f8>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a4b      	ldr	r2, [pc, #300]	; (800106c <HAL_GPIO_Init+0x318>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d101      	bne.n	8000f48 <HAL_GPIO_Init+0x1f4>
 8000f44:	2306      	movs	r3, #6
 8000f46:	e00c      	b.n	8000f62 <HAL_GPIO_Init+0x20e>
 8000f48:	2307      	movs	r3, #7
 8000f4a:	e00a      	b.n	8000f62 <HAL_GPIO_Init+0x20e>
 8000f4c:	2305      	movs	r3, #5
 8000f4e:	e008      	b.n	8000f62 <HAL_GPIO_Init+0x20e>
 8000f50:	2304      	movs	r3, #4
 8000f52:	e006      	b.n	8000f62 <HAL_GPIO_Init+0x20e>
 8000f54:	2303      	movs	r3, #3
 8000f56:	e004      	b.n	8000f62 <HAL_GPIO_Init+0x20e>
 8000f58:	2302      	movs	r3, #2
 8000f5a:	e002      	b.n	8000f62 <HAL_GPIO_Init+0x20e>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e000      	b.n	8000f62 <HAL_GPIO_Init+0x20e>
 8000f60:	2300      	movs	r3, #0
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	f002 0203 	and.w	r2, r2, #3
 8000f68:	0092      	lsls	r2, r2, #2
 8000f6a:	4093      	lsls	r3, r2
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f72:	4937      	ldr	r1, [pc, #220]	; (8001050 <HAL_GPIO_Init+0x2fc>)
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	3302      	adds	r3, #2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f80:	4b3b      	ldr	r3, [pc, #236]	; (8001070 <HAL_GPIO_Init+0x31c>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fa4:	4a32      	ldr	r2, [pc, #200]	; (8001070 <HAL_GPIO_Init+0x31c>)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000faa:	4b31      	ldr	r3, [pc, #196]	; (8001070 <HAL_GPIO_Init+0x31c>)
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fce:	4a28      	ldr	r2, [pc, #160]	; (8001070 <HAL_GPIO_Init+0x31c>)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fd4:	4b26      	ldr	r3, [pc, #152]	; (8001070 <HAL_GPIO_Init+0x31c>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ff8:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <HAL_GPIO_Init+0x31c>)
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <HAL_GPIO_Init+0x31c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001022:	4a13      	ldr	r2, [pc, #76]	; (8001070 <HAL_GPIO_Init+0x31c>)
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3301      	adds	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	fa22 f303 	lsr.w	r3, r2, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	f47f ae97 	bne.w	8000d6c <HAL_GPIO_Init+0x18>
  }
}
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	371c      	adds	r7, #28
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800
 8001050:	40010000 	.word	0x40010000
 8001054:	40020000 	.word	0x40020000
 8001058:	40020400 	.word	0x40020400
 800105c:	40020800 	.word	0x40020800
 8001060:	40020c00 	.word	0x40020c00
 8001064:	40021000 	.word	0x40021000
 8001068:	40021400 	.word	0x40021400
 800106c:	40021800 	.word	0x40021800
 8001070:	40010400 	.word	0x40010400

08001074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
 8001080:	4613      	mov	r3, r2
 8001082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001084:	787b      	ldrb	r3, [r7, #1]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001090:	e003      	b.n	800109a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	041a      	lsls	r2, r3, #16
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	619a      	str	r2, [r3, #24]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e31d      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010b6:	4b94      	ldr	r3, [pc, #592]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010c0:	4b91      	ldr	r3, [pc, #580]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d07b      	beq.n	80011ce <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d006      	beq.n	80010ea <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	2b0c      	cmp	r3, #12
 80010e0:	d10f      	bne.n	8001102 <HAL_RCC_OscConfig+0x5e>
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e8:	d10b      	bne.n	8001102 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ea:	4b87      	ldr	r3, [pc, #540]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d06a      	beq.n	80011cc <HAL_RCC_OscConfig+0x128>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d166      	bne.n	80011cc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e2f7      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d106      	bne.n	8001118 <HAL_RCC_OscConfig+0x74>
 800110a:	4b7f      	ldr	r3, [pc, #508]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a7e      	ldr	r2, [pc, #504]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e02d      	b.n	8001174 <HAL_RCC_OscConfig+0xd0>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10c      	bne.n	800113a <HAL_RCC_OscConfig+0x96>
 8001120:	4b79      	ldr	r3, [pc, #484]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a78      	ldr	r2, [pc, #480]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 8001126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b76      	ldr	r3, [pc, #472]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a75      	ldr	r2, [pc, #468]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 8001132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	e01c      	b.n	8001174 <HAL_RCC_OscConfig+0xd0>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b05      	cmp	r3, #5
 8001140:	d10c      	bne.n	800115c <HAL_RCC_OscConfig+0xb8>
 8001142:	4b71      	ldr	r3, [pc, #452]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a70      	ldr	r2, [pc, #448]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 8001148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b6e      	ldr	r3, [pc, #440]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a6d      	ldr	r2, [pc, #436]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e00b      	b.n	8001174 <HAL_RCC_OscConfig+0xd0>
 800115c:	4b6a      	ldr	r3, [pc, #424]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a69      	ldr	r2, [pc, #420]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 8001162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b67      	ldr	r3, [pc, #412]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a66      	ldr	r2, [pc, #408]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 800116e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d013      	beq.n	80011a4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fcda 	bl	8000b34 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fcd6 	bl	8000b34 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	; 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e2ad      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001196:	4b5c      	ldr	r3, [pc, #368]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f0      	beq.n	8001184 <HAL_RCC_OscConfig+0xe0>
 80011a2:	e014      	b.n	80011ce <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fcc6 	bl	8000b34 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fcc2 	bl	8000b34 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	; 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e299      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011be:	4b52      	ldr	r3, [pc, #328]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x108>
 80011ca:	e000      	b.n	80011ce <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d05a      	beq.n	8001290 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d005      	beq.n	80011ec <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	2b0c      	cmp	r3, #12
 80011e4:	d119      	bne.n	800121a <HAL_RCC_OscConfig+0x176>
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d116      	bne.n	800121a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ec:	4b46      	ldr	r3, [pc, #280]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d005      	beq.n	8001204 <HAL_RCC_OscConfig+0x160>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d001      	beq.n	8001204 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e276      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001204:	4b40      	ldr	r3, [pc, #256]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	493d      	ldr	r1, [pc, #244]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 8001214:	4313      	orrs	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001218:	e03a      	b.n	8001290 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d020      	beq.n	8001264 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001222:	4b3a      	ldr	r3, [pc, #232]	; (800130c <HAL_RCC_OscConfig+0x268>)
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fc84 	bl	8000b34 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001230:	f7ff fc80 	bl	8000b34 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e257      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001242:	4b31      	ldr	r3, [pc, #196]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	492a      	ldr	r1, [pc, #168]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 800125e:	4313      	orrs	r3, r2
 8001260:	604b      	str	r3, [r1, #4]
 8001262:	e015      	b.n	8001290 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001264:	4b29      	ldr	r3, [pc, #164]	; (800130c <HAL_RCC_OscConfig+0x268>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126a:	f7ff fc63 	bl	8000b34 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001272:	f7ff fc5f 	bl	8000b34 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e236      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001284:	4b20      	ldr	r3, [pc, #128]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1f0      	bne.n	8001272 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0310 	and.w	r3, r3, #16
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80b8 	beq.w	800140e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d170      	bne.n	8001386 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_RCC_OscConfig+0x218>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e21a      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1a      	ldr	r2, [r3, #32]
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d921      	bls.n	8001310 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fc3b 	bl	8001b4c <RCC_SetFlashLatencyFromMSIRange>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e208      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	4906      	ldr	r1, [pc, #24]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	061b      	lsls	r3, r3, #24
 8001300:	4901      	ldr	r1, [pc, #4]	; (8001308 <HAL_RCC_OscConfig+0x264>)
 8001302:	4313      	orrs	r3, r2
 8001304:	604b      	str	r3, [r1, #4]
 8001306:	e020      	b.n	800134a <HAL_RCC_OscConfig+0x2a6>
 8001308:	40023800 	.word	0x40023800
 800130c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001310:	4b99      	ldr	r3, [pc, #612]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	4996      	ldr	r1, [pc, #600]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 800131e:	4313      	orrs	r3, r2
 8001320:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001322:	4b95      	ldr	r3, [pc, #596]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	061b      	lsls	r3, r3, #24
 8001330:	4991      	ldr	r1, [pc, #580]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 8001332:	4313      	orrs	r3, r2
 8001334:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	4618      	mov	r0, r3
 800133c:	f000 fc06 	bl	8001b4c <RCC_SetFlashLatencyFromMSIRange>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e1d3      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	0b5b      	lsrs	r3, r3, #13
 8001350:	3301      	adds	r3, #1
 8001352:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800135a:	4a87      	ldr	r2, [pc, #540]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 800135c:	6892      	ldr	r2, [r2, #8]
 800135e:	0912      	lsrs	r2, r2, #4
 8001360:	f002 020f 	and.w	r2, r2, #15
 8001364:	4985      	ldr	r1, [pc, #532]	; (800157c <HAL_RCC_OscConfig+0x4d8>)
 8001366:	5c8a      	ldrb	r2, [r1, r2]
 8001368:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800136a:	4a85      	ldr	r2, [pc, #532]	; (8001580 <HAL_RCC_OscConfig+0x4dc>)
 800136c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800136e:	4b85      	ldr	r3, [pc, #532]	; (8001584 <HAL_RCC_OscConfig+0x4e0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fb92 	bl	8000a9c <HAL_InitTick>
 8001378:	4603      	mov	r3, r0
 800137a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d045      	beq.n	800140e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	e1b5      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d029      	beq.n	80013e2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800138e:	4b7e      	ldr	r3, [pc, #504]	; (8001588 <HAL_RCC_OscConfig+0x4e4>)
 8001390:	2201      	movs	r2, #1
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff fbce 	bl	8000b34 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800139c:	f7ff fbca 	bl	8000b34 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e1a1      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013ae:	4b72      	ldr	r3, [pc, #456]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ba:	4b6f      	ldr	r3, [pc, #444]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	496c      	ldr	r1, [pc, #432]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013cc:	4b6a      	ldr	r3, [pc, #424]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	061b      	lsls	r3, r3, #24
 80013da:	4967      	ldr	r1, [pc, #412]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
 80013e0:	e015      	b.n	800140e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013e2:	4b69      	ldr	r3, [pc, #420]	; (8001588 <HAL_RCC_OscConfig+0x4e4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fba4 	bl	8000b34 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013f0:	f7ff fba0 	bl	8000b34 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e177      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001402:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b00      	cmp	r3, #0
 8001418:	d030      	beq.n	800147c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d016      	beq.n	8001450 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001422:	4b5a      	ldr	r3, [pc, #360]	; (800158c <HAL_RCC_OscConfig+0x4e8>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001428:	f7ff fb84 	bl	8000b34 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001430:	f7ff fb80 	bl	8000b34 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e157      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001442:	4b4d      	ldr	r3, [pc, #308]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 8001444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x38c>
 800144e:	e015      	b.n	800147c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001450:	4b4e      	ldr	r3, [pc, #312]	; (800158c <HAL_RCC_OscConfig+0x4e8>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001456:	f7ff fb6d 	bl	8000b34 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145e:	f7ff fb69 	bl	8000b34 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e140      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001470:	4b41      	ldr	r3, [pc, #260]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 8001472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f0      	bne.n	800145e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80b5 	beq.w	80015f4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148e:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10d      	bne.n	80014b6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	4b37      	ldr	r3, [pc, #220]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	4a36      	ldr	r2, [pc, #216]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a4:	6253      	str	r3, [r2, #36]	; 0x24
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b2:	2301      	movs	r3, #1
 80014b4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b6:	4b36      	ldr	r3, [pc, #216]	; (8001590 <HAL_RCC_OscConfig+0x4ec>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d118      	bne.n	80014f4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014c2:	4b33      	ldr	r3, [pc, #204]	; (8001590 <HAL_RCC_OscConfig+0x4ec>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a32      	ldr	r2, [pc, #200]	; (8001590 <HAL_RCC_OscConfig+0x4ec>)
 80014c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fb31 	bl	8000b34 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d6:	f7ff fb2d 	bl	8000b34 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b64      	cmp	r3, #100	; 0x64
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e104      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e8:	4b29      	ldr	r3, [pc, #164]	; (8001590 <HAL_RCC_OscConfig+0x4ec>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d106      	bne.n	800150a <HAL_RCC_OscConfig+0x466>
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 80014fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001500:	4a1d      	ldr	r2, [pc, #116]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 8001502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001506:	6353      	str	r3, [r2, #52]	; 0x34
 8001508:	e02d      	b.n	8001566 <HAL_RCC_OscConfig+0x4c2>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10c      	bne.n	800152c <HAL_RCC_OscConfig+0x488>
 8001512:	4b19      	ldr	r3, [pc, #100]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 8001514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001516:	4a18      	ldr	r2, [pc, #96]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 8001518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800151c:	6353      	str	r3, [r2, #52]	; 0x34
 800151e:	4b16      	ldr	r3, [pc, #88]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 8001520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001522:	4a15      	ldr	r2, [pc, #84]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 8001524:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001528:	6353      	str	r3, [r2, #52]	; 0x34
 800152a:	e01c      	b.n	8001566 <HAL_RCC_OscConfig+0x4c2>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2b05      	cmp	r3, #5
 8001532:	d10c      	bne.n	800154e <HAL_RCC_OscConfig+0x4aa>
 8001534:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 8001536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001538:	4a0f      	ldr	r2, [pc, #60]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 800153a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153e:	6353      	str	r3, [r2, #52]	; 0x34
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 8001542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001544:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 8001546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154a:	6353      	str	r3, [r2, #52]	; 0x34
 800154c:	e00b      	b.n	8001566 <HAL_RCC_OscConfig+0x4c2>
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 8001550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001552:	4a09      	ldr	r2, [pc, #36]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 8001554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001558:	6353      	str	r3, [r2, #52]	; 0x34
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 800155c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155e:	4a06      	ldr	r2, [pc, #24]	; (8001578 <HAL_RCC_OscConfig+0x4d4>)
 8001560:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001564:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d024      	beq.n	80015b8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff fae1 	bl	8000b34 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001574:	e019      	b.n	80015aa <HAL_RCC_OscConfig+0x506>
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	08003bf0 	.word	0x08003bf0
 8001580:	20000000 	.word	0x20000000
 8001584:	20000004 	.word	0x20000004
 8001588:	42470020 	.word	0x42470020
 800158c:	42470680 	.word	0x42470680
 8001590:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001594:	f7ff face 	bl	8000b34 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e0a3      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015aa:	4b54      	ldr	r3, [pc, #336]	; (80016fc <HAL_RCC_OscConfig+0x658>)
 80015ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0ee      	beq.n	8001594 <HAL_RCC_OscConfig+0x4f0>
 80015b6:	e014      	b.n	80015e2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b8:	f7ff fabc 	bl	8000b34 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c0:	f7ff fab8 	bl	8000b34 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e08d      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015d6:	4b49      	ldr	r3, [pc, #292]	; (80016fc <HAL_RCC_OscConfig+0x658>)
 80015d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1ee      	bne.n	80015c0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015e2:	7ffb      	ldrb	r3, [r7, #31]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d105      	bne.n	80015f4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e8:	4b44      	ldr	r3, [pc, #272]	; (80016fc <HAL_RCC_OscConfig+0x658>)
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	4a43      	ldr	r2, [pc, #268]	; (80016fc <HAL_RCC_OscConfig+0x658>)
 80015ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d079      	beq.n	80016f0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2b0c      	cmp	r3, #12
 8001600:	d056      	beq.n	80016b0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	2b02      	cmp	r3, #2
 8001608:	d13b      	bne.n	8001682 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160a:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <HAL_RCC_OscConfig+0x65c>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fa90 	bl	8000b34 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff fa8c 	bl	8000b34 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e063      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800162a:	4b34      	ldr	r3, [pc, #208]	; (80016fc <HAL_RCC_OscConfig+0x658>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001636:	4b31      	ldr	r3, [pc, #196]	; (80016fc <HAL_RCC_OscConfig+0x658>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	4319      	orrs	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	430b      	orrs	r3, r1
 800164e:	492b      	ldr	r1, [pc, #172]	; (80016fc <HAL_RCC_OscConfig+0x658>)
 8001650:	4313      	orrs	r3, r2
 8001652:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001654:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <HAL_RCC_OscConfig+0x65c>)
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fa6b 	bl	8000b34 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001662:	f7ff fa67 	bl	8000b34 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e03e      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001674:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_RCC_OscConfig+0x658>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x5be>
 8001680:	e036      	b.n	80016f0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <HAL_RCC_OscConfig+0x65c>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fa54 	bl	8000b34 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fa50 	bl	8000b34 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e027      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <HAL_RCC_OscConfig+0x658>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x5ec>
 80016ae:	e01f      	b.n	80016f0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e01a      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_RCC_OscConfig+0x658>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d10d      	bne.n	80016ec <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d106      	bne.n	80016ec <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800
 8001700:	42470060 	.word	0x42470060

08001704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e11a      	b.n	800194e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001718:	4b8f      	ldr	r3, [pc, #572]	; (8001958 <HAL_RCC_ClockConfig+0x254>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d919      	bls.n	800175a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d105      	bne.n	8001738 <HAL_RCC_ClockConfig+0x34>
 800172c:	4b8a      	ldr	r3, [pc, #552]	; (8001958 <HAL_RCC_ClockConfig+0x254>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a89      	ldr	r2, [pc, #548]	; (8001958 <HAL_RCC_ClockConfig+0x254>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b87      	ldr	r3, [pc, #540]	; (8001958 <HAL_RCC_ClockConfig+0x254>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 0201 	bic.w	r2, r3, #1
 8001740:	4985      	ldr	r1, [pc, #532]	; (8001958 <HAL_RCC_ClockConfig+0x254>)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	4313      	orrs	r3, r2
 8001746:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001748:	4b83      	ldr	r3, [pc, #524]	; (8001958 <HAL_RCC_ClockConfig+0x254>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d001      	beq.n	800175a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e0f9      	b.n	800194e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d008      	beq.n	8001778 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001766:	4b7d      	ldr	r3, [pc, #500]	; (800195c <HAL_RCC_ClockConfig+0x258>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	497a      	ldr	r1, [pc, #488]	; (800195c <HAL_RCC_ClockConfig+0x258>)
 8001774:	4313      	orrs	r3, r2
 8001776:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 808e 	beq.w	80018a2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800178e:	4b73      	ldr	r3, [pc, #460]	; (800195c <HAL_RCC_ClockConfig+0x258>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d121      	bne.n	80017de <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e0d7      	b.n	800194e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017a6:	4b6d      	ldr	r3, [pc, #436]	; (800195c <HAL_RCC_ClockConfig+0x258>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d115      	bne.n	80017de <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e0cb      	b.n	800194e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017be:	4b67      	ldr	r3, [pc, #412]	; (800195c <HAL_RCC_ClockConfig+0x258>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d109      	bne.n	80017de <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0bf      	b.n	800194e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017ce:	4b63      	ldr	r3, [pc, #396]	; (800195c <HAL_RCC_ClockConfig+0x258>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e0b7      	b.n	800194e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017de:	4b5f      	ldr	r3, [pc, #380]	; (800195c <HAL_RCC_ClockConfig+0x258>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f023 0203 	bic.w	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	495c      	ldr	r1, [pc, #368]	; (800195c <HAL_RCC_ClockConfig+0x258>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017f0:	f7ff f9a0 	bl	8000b34 <HAL_GetTick>
 80017f4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d112      	bne.n	8001824 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001800:	f7ff f998 	bl	8000b34 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f241 3288 	movw	r2, #5000	; 0x1388
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e09b      	b.n	800194e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001816:	4b51      	ldr	r3, [pc, #324]	; (800195c <HAL_RCC_ClockConfig+0x258>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b08      	cmp	r3, #8
 8001820:	d1ee      	bne.n	8001800 <HAL_RCC_ClockConfig+0xfc>
 8001822:	e03e      	b.n	80018a2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d112      	bne.n	8001852 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800182c:	e00a      	b.n	8001844 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182e:	f7ff f981 	bl	8000b34 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f241 3288 	movw	r2, #5000	; 0x1388
 800183c:	4293      	cmp	r3, r2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e084      	b.n	800194e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001844:	4b45      	ldr	r3, [pc, #276]	; (800195c <HAL_RCC_ClockConfig+0x258>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b0c      	cmp	r3, #12
 800184e:	d1ee      	bne.n	800182e <HAL_RCC_ClockConfig+0x12a>
 8001850:	e027      	b.n	80018a2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d11d      	bne.n	8001896 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800185a:	e00a      	b.n	8001872 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185c:	f7ff f96a 	bl	8000b34 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	; 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e06d      	b.n	800194e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001872:	4b3a      	ldr	r3, [pc, #232]	; (800195c <HAL_RCC_ClockConfig+0x258>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b04      	cmp	r3, #4
 800187c:	d1ee      	bne.n	800185c <HAL_RCC_ClockConfig+0x158>
 800187e:	e010      	b.n	80018a2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001880:	f7ff f958 	bl	8000b34 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	; 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e05b      	b.n	800194e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001896:	4b31      	ldr	r3, [pc, #196]	; (800195c <HAL_RCC_ClockConfig+0x258>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1ee      	bne.n	8001880 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a2:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <HAL_RCC_ClockConfig+0x254>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d219      	bcs.n	80018e4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d105      	bne.n	80018c2 <HAL_RCC_ClockConfig+0x1be>
 80018b6:	4b28      	ldr	r3, [pc, #160]	; (8001958 <HAL_RCC_ClockConfig+0x254>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a27      	ldr	r2, [pc, #156]	; (8001958 <HAL_RCC_ClockConfig+0x254>)
 80018bc:	f043 0304 	orr.w	r3, r3, #4
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	4b25      	ldr	r3, [pc, #148]	; (8001958 <HAL_RCC_ClockConfig+0x254>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 0201 	bic.w	r2, r3, #1
 80018ca:	4923      	ldr	r1, [pc, #140]	; (8001958 <HAL_RCC_ClockConfig+0x254>)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b21      	ldr	r3, [pc, #132]	; (8001958 <HAL_RCC_ClockConfig+0x254>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e034      	b.n	800194e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d008      	beq.n	8001902 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <HAL_RCC_ClockConfig+0x258>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	4917      	ldr	r1, [pc, #92]	; (800195c <HAL_RCC_ClockConfig+0x258>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d009      	beq.n	8001922 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190e:	4b13      	ldr	r3, [pc, #76]	; (800195c <HAL_RCC_ClockConfig+0x258>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	490f      	ldr	r1, [pc, #60]	; (800195c <HAL_RCC_ClockConfig+0x258>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001922:	f000 f823 	bl	800196c <HAL_RCC_GetSysClockFreq>
 8001926:	4602      	mov	r2, r0
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_RCC_ClockConfig+0x258>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	490b      	ldr	r1, [pc, #44]	; (8001960 <HAL_RCC_ClockConfig+0x25c>)
 8001934:	5ccb      	ldrb	r3, [r1, r3]
 8001936:	fa22 f303 	lsr.w	r3, r2, r3
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_RCC_ClockConfig+0x260>)
 800193c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_RCC_ClockConfig+0x264>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff f8aa 	bl	8000a9c <HAL_InitTick>
 8001948:	4603      	mov	r3, r0
 800194a:	72fb      	strb	r3, [r7, #11]

  return status;
 800194c:	7afb      	ldrb	r3, [r7, #11]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40023c00 	.word	0x40023c00
 800195c:	40023800 	.word	0x40023800
 8001960:	08003bf0 	.word	0x08003bf0
 8001964:	20000000 	.word	0x20000000
 8001968:	20000004 	.word	0x20000004

0800196c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800196c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001970:	b08e      	sub	sp, #56	; 0x38
 8001972:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001974:	4b58      	ldr	r3, [pc, #352]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800197a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d00d      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x34>
 8001984:	2b0c      	cmp	r3, #12
 8001986:	f200 8092 	bhi.w	8001aae <HAL_RCC_GetSysClockFreq+0x142>
 800198a:	2b04      	cmp	r3, #4
 800198c:	d002      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x28>
 800198e:	2b08      	cmp	r3, #8
 8001990:	d003      	beq.n	800199a <HAL_RCC_GetSysClockFreq+0x2e>
 8001992:	e08c      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001994:	4b51      	ldr	r3, [pc, #324]	; (8001adc <HAL_RCC_GetSysClockFreq+0x170>)
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001998:	e097      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800199a:	4b51      	ldr	r3, [pc, #324]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x174>)
 800199c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800199e:	e094      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80019a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a2:	0c9b      	lsrs	r3, r3, #18
 80019a4:	f003 020f 	and.w	r2, r3, #15
 80019a8:	4b4e      	ldr	r3, [pc, #312]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x178>)
 80019aa:	5c9b      	ldrb	r3, [r3, r2]
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80019ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b0:	0d9b      	lsrs	r3, r3, #22
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	3301      	adds	r3, #1
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ba:	4b47      	ldr	r3, [pc, #284]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x16c>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d021      	beq.n	8001a0a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c8:	2200      	movs	r2, #0
 80019ca:	61bb      	str	r3, [r7, #24]
 80019cc:	61fa      	str	r2, [r7, #28]
 80019ce:	4b44      	ldr	r3, [pc, #272]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x174>)
 80019d0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80019d4:	464a      	mov	r2, r9
 80019d6:	fb03 f202 	mul.w	r2, r3, r2
 80019da:	2300      	movs	r3, #0
 80019dc:	4644      	mov	r4, r8
 80019de:	fb04 f303 	mul.w	r3, r4, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	4a3e      	ldr	r2, [pc, #248]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x174>)
 80019e6:	4644      	mov	r4, r8
 80019e8:	fba4 0102 	umull	r0, r1, r4, r2
 80019ec:	440b      	add	r3, r1
 80019ee:	4619      	mov	r1, r3
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	2200      	movs	r2, #0
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	617a      	str	r2, [r7, #20]
 80019f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019fc:	f7fe fbc6 	bl	800018c <__aeabi_uldivmod>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4613      	mov	r3, r2
 8001a06:	637b      	str	r3, [r7, #52]	; 0x34
 8001a08:	e04e      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	469a      	mov	sl, r3
 8001a10:	4693      	mov	fp, r2
 8001a12:	4652      	mov	r2, sl
 8001a14:	465b      	mov	r3, fp
 8001a16:	f04f 0000 	mov.w	r0, #0
 8001a1a:	f04f 0100 	mov.w	r1, #0
 8001a1e:	0159      	lsls	r1, r3, #5
 8001a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a24:	0150      	lsls	r0, r2, #5
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	ebb2 080a 	subs.w	r8, r2, sl
 8001a2e:	eb63 090b 	sbc.w	r9, r3, fp
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a46:	ebb2 0408 	subs.w	r4, r2, r8
 8001a4a:	eb63 0509 	sbc.w	r5, r3, r9
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	00eb      	lsls	r3, r5, #3
 8001a58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a5c:	00e2      	lsls	r2, r4, #3
 8001a5e:	4614      	mov	r4, r2
 8001a60:	461d      	mov	r5, r3
 8001a62:	eb14 030a 	adds.w	r3, r4, sl
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	eb45 030b 	adc.w	r3, r5, fp
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	028b      	lsls	r3, r1, #10
 8001a7e:	4620      	mov	r0, r4
 8001a80:	4629      	mov	r1, r5
 8001a82:	4604      	mov	r4, r0
 8001a84:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001a88:	4601      	mov	r1, r0
 8001a8a:	028a      	lsls	r2, r1, #10
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	2200      	movs	r2, #0
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	60fa      	str	r2, [r7, #12]
 8001a98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a9c:	f7fe fb76 	bl	800018c <__aeabi_uldivmod>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8001aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aaa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001aac:	e00d      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	0b5b      	lsrs	r3, r3, #13
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	3301      	adds	r3, #1
 8001abe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3738      	adds	r7, #56	; 0x38
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	00f42400 	.word	0x00f42400
 8001ae0:	016e3600 	.word	0x016e3600
 8001ae4:	08003be4 	.word	0x08003be4

08001ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aec:	4b02      	ldr	r3, [pc, #8]	; (8001af8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	20000000 	.word	0x20000000

08001afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b00:	f7ff fff2 	bl	8001ae8 <HAL_RCC_GetHCLKFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	0a1b      	lsrs	r3, r3, #8
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	4903      	ldr	r1, [pc, #12]	; (8001b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	08003c00 	.word	0x08003c00

08001b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b28:	f7ff ffde 	bl	8001ae8 <HAL_RCC_GetHCLKFreq>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	0adb      	lsrs	r3, r3, #11
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4903      	ldr	r1, [pc, #12]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	08003c00 	.word	0x08003c00

08001b4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b58:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d12c      	bne.n	8001bbe <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b64:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	e016      	b.n	8001baa <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7c:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	4a1f      	ldr	r2, [pc, #124]	; (8001c00 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b86:	6253      	str	r3, [r2, #36]	; 0x24
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b9c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001bb0:	d105      	bne.n	8001bbe <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001bb8:	d101      	bne.n	8001bbe <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001bba:	2301      	movs	r3, #1
 8001bbc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d105      	bne.n	8001bd0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0f      	ldr	r2, [pc, #60]	; (8001c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f023 0201 	bic.w	r2, r3, #1
 8001bd8:	490b      	ldr	r1, [pc, #44]	; (8001c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d001      	beq.n	8001bf2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	371c      	adds	r7, #28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40007000 	.word	0x40007000
 8001c08:	40023c00 	.word	0x40023c00

08001c0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e07b      	b.n	8001d16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d108      	bne.n	8001c38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c2e:	d009      	beq.n	8001c44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]
 8001c36:	e005      	b.n	8001c44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d106      	bne.n	8001c64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7fe fdf2 	bl	8000848 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc8:	ea42 0103 	orr.w	r1, r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	0c1b      	lsrs	r3, r3, #16
 8001ce2:	f003 0104 	and.w	r1, r3, #4
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	f003 0210 	and.w	r2, r3, #16
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69da      	ldr	r2, [r3, #28]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b088      	sub	sp, #32
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_SPI_Transmit+0x22>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e12d      	b.n	8001f9c <HAL_SPI_Transmit+0x27e>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d48:	f7fe fef4 	bl	8000b34 <HAL_GetTick>
 8001d4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d002      	beq.n	8001d64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d62:	e116      	b.n	8001f92 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_SPI_Transmit+0x52>
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d102      	bne.n	8001d76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d74:	e10d      	b.n	8001f92 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2203      	movs	r2, #3
 8001d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	88fa      	ldrh	r2, [r7, #6]
 8001d8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	88fa      	ldrh	r2, [r7, #6]
 8001d94:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dbc:	d10f      	bne.n	8001dde <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ddc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de8:	2b40      	cmp	r3, #64	; 0x40
 8001dea:	d007      	beq.n	8001dfc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e04:	d14f      	bne.n	8001ea6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <HAL_SPI_Transmit+0xf6>
 8001e0e:	8afb      	ldrh	r3, [r7, #22]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d142      	bne.n	8001e9a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	881a      	ldrh	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	1c9a      	adds	r2, r3, #2
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e38:	e02f      	b.n	8001e9a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d112      	bne.n	8001e6e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4c:	881a      	ldrh	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	1c9a      	adds	r2, r3, #2
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e6c:	e015      	b.n	8001e9a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e6e:	f7fe fe61 	bl	8000b34 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d803      	bhi.n	8001e86 <HAL_SPI_Transmit+0x168>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e84:	d102      	bne.n	8001e8c <HAL_SPI_Transmit+0x16e>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d106      	bne.n	8001e9a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001e98:	e07b      	b.n	8001f92 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1ca      	bne.n	8001e3a <HAL_SPI_Transmit+0x11c>
 8001ea4:	e050      	b.n	8001f48 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <HAL_SPI_Transmit+0x196>
 8001eae:	8afb      	ldrh	r3, [r7, #22]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d144      	bne.n	8001f3e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	330c      	adds	r3, #12
 8001ebe:	7812      	ldrb	r2, [r2, #0]
 8001ec0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001eda:	e030      	b.n	8001f3e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d113      	bne.n	8001f12 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	330c      	adds	r3, #12
 8001ef4:	7812      	ldrb	r2, [r2, #0]
 8001ef6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f10:	e015      	b.n	8001f3e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f12:	f7fe fe0f 	bl	8000b34 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d803      	bhi.n	8001f2a <HAL_SPI_Transmit+0x20c>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f28:	d102      	bne.n	8001f30 <HAL_SPI_Transmit+0x212>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d106      	bne.n	8001f3e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001f3c:	e029      	b.n	8001f92 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1c9      	bne.n	8001edc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	6839      	ldr	r1, [r7, #0]
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 fbed 	bl	800272c <SPI_EndRxTxTransaction>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10a      	bne.n	8001f7c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	77fb      	strb	r3, [r7, #31]
 8001f88:	e003      	b.n	8001f92 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3720      	adds	r7, #32
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d002      	beq.n	8001fca <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001fc8:	e0fb      	b.n	80021c2 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fd2:	d112      	bne.n	8001ffa <HAL_SPI_Receive+0x56>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10e      	bne.n	8001ffa <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2204      	movs	r2, #4
 8001fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001fe4:	88fa      	ldrh	r2, [r7, #6]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	4613      	mov	r3, r2
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	68b9      	ldr	r1, [r7, #8]
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 f8ef 	bl	80021d4 <HAL_SPI_TransmitReceive>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	e0e8      	b.n	80021cc <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_SPI_Receive+0x64>
 8002004:	2302      	movs	r3, #2
 8002006:	e0e1      	b.n	80021cc <HAL_SPI_Receive+0x228>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002010:	f7fe fd90 	bl	8000b34 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <HAL_SPI_Receive+0x7e>
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d102      	bne.n	8002028 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002026:	e0cc      	b.n	80021c2 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2204      	movs	r2, #4
 800202c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	88fa      	ldrh	r2, [r7, #6]
 8002040:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	88fa      	ldrh	r2, [r7, #6]
 8002046:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800206e:	d10f      	bne.n	8002090 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800207e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800208e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209a:	2b40      	cmp	r3, #64	; 0x40
 800209c:	d007      	beq.n	80020ae <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d16a      	bne.n	800218c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80020b6:	e032      	b.n	800211e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d115      	bne.n	80020f2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f103 020c 	add.w	r2, r3, #12
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d2:	7812      	ldrb	r2, [r2, #0]
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020f0:	e015      	b.n	800211e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020f2:	f7fe fd1f 	bl	8000b34 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d803      	bhi.n	800210a <HAL_SPI_Receive+0x166>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d102      	bne.n	8002110 <HAL_SPI_Receive+0x16c>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d106      	bne.n	800211e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800211c:	e051      	b.n	80021c2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1c7      	bne.n	80020b8 <HAL_SPI_Receive+0x114>
 8002128:	e035      	b.n	8002196 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b01      	cmp	r3, #1
 8002136:	d113      	bne.n	8002160 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002142:	b292      	uxth	r2, r2
 8002144:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214a:	1c9a      	adds	r2, r3, #2
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002154:	b29b      	uxth	r3, r3
 8002156:	3b01      	subs	r3, #1
 8002158:	b29a      	uxth	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800215e:	e015      	b.n	800218c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002160:	f7fe fce8 	bl	8000b34 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d803      	bhi.n	8002178 <HAL_SPI_Receive+0x1d4>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002176:	d102      	bne.n	800217e <HAL_SPI_Receive+0x1da>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800218a:	e01a      	b.n	80021c2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002190:	b29b      	uxth	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1c9      	bne.n	800212a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	6839      	ldr	r1, [r7, #0]
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 fa60 	bl	8002660 <SPI_EndRxTransaction>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d002      	beq.n	80021ac <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2220      	movs	r2, #32
 80021aa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	75fb      	strb	r3, [r7, #23]
 80021b8:	e003      	b.n	80021c2 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08c      	sub	sp, #48	; 0x30
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80021e2:	2301      	movs	r3, #1
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_SPI_TransmitReceive+0x26>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e198      	b.n	800252c <HAL_SPI_TransmitReceive+0x358>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002202:	f7fe fc97 	bl	8000b34 <HAL_GetTick>
 8002206:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800220e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002218:	887b      	ldrh	r3, [r7, #2]
 800221a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800221c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002220:	2b01      	cmp	r3, #1
 8002222:	d00f      	beq.n	8002244 <HAL_SPI_TransmitReceive+0x70>
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800222a:	d107      	bne.n	800223c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d103      	bne.n	800223c <HAL_SPI_TransmitReceive+0x68>
 8002234:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002238:	2b04      	cmp	r3, #4
 800223a:	d003      	beq.n	8002244 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800223c:	2302      	movs	r3, #2
 800223e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002242:	e16d      	b.n	8002520 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_SPI_TransmitReceive+0x82>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <HAL_SPI_TransmitReceive+0x82>
 8002250:	887b      	ldrh	r3, [r7, #2]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d103      	bne.n	800225e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800225c:	e160      	b.n	8002520 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b04      	cmp	r3, #4
 8002268:	d003      	beq.n	8002272 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2205      	movs	r2, #5
 800226e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	887a      	ldrh	r2, [r7, #2]
 8002282:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	887a      	ldrh	r2, [r7, #2]
 8002294:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	887a      	ldrh	r2, [r7, #2]
 800229a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b2:	2b40      	cmp	r3, #64	; 0x40
 80022b4:	d007      	beq.n	80022c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022ce:	d17c      	bne.n	80023ca <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <HAL_SPI_TransmitReceive+0x10a>
 80022d8:	8b7b      	ldrh	r3, [r7, #26]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d16a      	bne.n	80023b4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	881a      	ldrh	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	1c9a      	adds	r2, r3, #2
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002302:	e057      	b.n	80023b4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b02      	cmp	r3, #2
 8002310:	d11b      	bne.n	800234a <HAL_SPI_TransmitReceive+0x176>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002316:	b29b      	uxth	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d016      	beq.n	800234a <HAL_SPI_TransmitReceive+0x176>
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	2b01      	cmp	r3, #1
 8002320:	d113      	bne.n	800234a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	881a      	ldrh	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	1c9a      	adds	r2, r3, #2
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	d119      	bne.n	800238c <HAL_SPI_TransmitReceive+0x1b8>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800235c:	b29b      	uxth	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d014      	beq.n	800238c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236c:	b292      	uxth	r2, r2
 800236e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002374:	1c9a      	adds	r2, r3, #2
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002388:	2301      	movs	r3, #1
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800238c:	f7fe fbd2 	bl	8000b34 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002398:	429a      	cmp	r2, r3
 800239a:	d80b      	bhi.n	80023b4 <HAL_SPI_TransmitReceive+0x1e0>
 800239c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a2:	d007      	beq.n	80023b4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80023b2:	e0b5      	b.n	8002520 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1a2      	bne.n	8002304 <HAL_SPI_TransmitReceive+0x130>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d19d      	bne.n	8002304 <HAL_SPI_TransmitReceive+0x130>
 80023c8:	e080      	b.n	80024cc <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <HAL_SPI_TransmitReceive+0x204>
 80023d2:	8b7b      	ldrh	r3, [r7, #26]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d16f      	bne.n	80024b8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	330c      	adds	r3, #12
 80023e2:	7812      	ldrb	r2, [r2, #0]
 80023e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023fe:	e05b      	b.n	80024b8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d11c      	bne.n	8002448 <HAL_SPI_TransmitReceive+0x274>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d017      	beq.n	8002448 <HAL_SPI_TransmitReceive+0x274>
 8002418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241a:	2b01      	cmp	r3, #1
 800241c:	d114      	bne.n	8002448 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	330c      	adds	r3, #12
 8002428:	7812      	ldrb	r2, [r2, #0]
 800242a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b01      	cmp	r3, #1
 8002454:	d119      	bne.n	800248a <HAL_SPI_TransmitReceive+0x2b6>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d014      	beq.n	800248a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002486:	2301      	movs	r3, #1
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800248a:	f7fe fb53 	bl	8000b34 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002496:	429a      	cmp	r2, r3
 8002498:	d803      	bhi.n	80024a2 <HAL_SPI_TransmitReceive+0x2ce>
 800249a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d102      	bne.n	80024a8 <HAL_SPI_TransmitReceive+0x2d4>
 80024a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d107      	bne.n	80024b8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80024b6:	e033      	b.n	8002520 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d19e      	bne.n	8002400 <HAL_SPI_TransmitReceive+0x22c>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d199      	bne.n	8002400 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f92b 	bl	800272c <SPI_EndRxTxTransaction>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d006      	beq.n	80024ea <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2220      	movs	r2, #32
 80024e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80024e8:	e01a      	b.n	8002520 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10a      	bne.n	8002508 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002516:	e003      	b.n	8002520 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002528:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800252c:	4618      	mov	r0, r3
 800252e:	3730      	adds	r7, #48	; 0x30
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002542:	b2db      	uxtb	r3, r3
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
	...

08002550 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	4613      	mov	r3, r2
 800255e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002560:	f7fe fae8 	bl	8000b34 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	4413      	add	r3, r2
 800256e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002570:	f7fe fae0 	bl	8000b34 <HAL_GetTick>
 8002574:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002576:	4b39      	ldr	r3, [pc, #228]	; (800265c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	015b      	lsls	r3, r3, #5
 800257c:	0d1b      	lsrs	r3, r3, #20
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	fb02 f303 	mul.w	r3, r2, r3
 8002584:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002586:	e054      	b.n	8002632 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258e:	d050      	beq.n	8002632 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002590:	f7fe fad0 	bl	8000b34 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	429a      	cmp	r2, r3
 800259e:	d902      	bls.n	80025a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d13d      	bne.n	8002622 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025be:	d111      	bne.n	80025e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025c8:	d004      	beq.n	80025d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d2:	d107      	bne.n	80025e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ec:	d10f      	bne.n	800260e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800260c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e017      	b.n	8002652 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3b01      	subs	r3, #1
 8002630:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4013      	ands	r3, r2
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	429a      	cmp	r2, r3
 8002640:	bf0c      	ite	eq
 8002642:	2301      	moveq	r3, #1
 8002644:	2300      	movne	r3, #0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	429a      	cmp	r2, r3
 800264e:	d19b      	bne.n	8002588 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3720      	adds	r7, #32
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000000 	.word	0x20000000

08002660 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af02      	add	r7, sp, #8
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002674:	d111      	bne.n	800269a <SPI_EndRxTransaction+0x3a>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800267e:	d004      	beq.n	800268a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002688:	d107      	bne.n	800269a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002698:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026a2:	d12a      	bne.n	80026fa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ac:	d012      	beq.n	80026d4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2200      	movs	r2, #0
 80026b6:	2180      	movs	r1, #128	; 0x80
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f7ff ff49 	bl	8002550 <SPI_WaitFlagStateUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d02d      	beq.n	8002720 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c8:	f043 0220 	orr.w	r2, r3, #32
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e026      	b.n	8002722 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2200      	movs	r2, #0
 80026dc:	2101      	movs	r1, #1
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f7ff ff36 	bl	8002550 <SPI_WaitFlagStateUntilTimeout>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d01a      	beq.n	8002720 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	f043 0220 	orr.w	r2, r3, #32
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e013      	b.n	8002722 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2200      	movs	r2, #0
 8002702:	2101      	movs	r1, #1
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f7ff ff23 	bl	8002550 <SPI_WaitFlagStateUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d007      	beq.n	8002720 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002714:	f043 0220 	orr.w	r2, r3, #32
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e000      	b.n	8002722 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <SPI_EndRxTxTransaction+0x7c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a1b      	ldr	r2, [pc, #108]	; (80027ac <SPI_EndRxTxTransaction+0x80>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	0d5b      	lsrs	r3, r3, #21
 8002744:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002748:	fb02 f303 	mul.w	r3, r2, r3
 800274c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002756:	d112      	bne.n	800277e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2200      	movs	r2, #0
 8002760:	2180      	movs	r1, #128	; 0x80
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f7ff fef4 	bl	8002550 <SPI_WaitFlagStateUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d016      	beq.n	800279c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002772:	f043 0220 	orr.w	r2, r3, #32
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e00f      	b.n	800279e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	3b01      	subs	r3, #1
 8002788:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002794:	2b80      	cmp	r3, #128	; 0x80
 8002796:	d0f2      	beq.n	800277e <SPI_EndRxTxTransaction+0x52>
 8002798:	e000      	b.n	800279c <SPI_EndRxTxTransaction+0x70>
        break;
 800279a:	bf00      	nop
  }

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000000 	.word	0x20000000
 80027ac:	165e9f81 	.word	0x165e9f81

080027b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e042      	b.n	8002848 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7fe f87a 	bl	80008d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2224      	movs	r2, #36	; 0x24
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f91d 	bl	8002a34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002818:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002828:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	; 0x28
 8002854:	af02      	add	r7, sp, #8
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	4613      	mov	r3, r2
 800285e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b20      	cmp	r3, #32
 800286e:	d16d      	bne.n	800294c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_UART_Transmit+0x2c>
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e066      	b.n	800294e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2221      	movs	r2, #33	; 0x21
 800288a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800288e:	f7fe f951 	bl	8000b34 <HAL_GetTick>
 8002892:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	88fa      	ldrh	r2, [r7, #6]
 8002898:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	88fa      	ldrh	r2, [r7, #6]
 800289e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a8:	d108      	bne.n	80028bc <HAL_UART_Transmit+0x6c>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d104      	bne.n	80028bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	61bb      	str	r3, [r7, #24]
 80028ba:	e003      	b.n	80028c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028c4:	e02a      	b.n	800291c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2200      	movs	r2, #0
 80028ce:	2180      	movs	r1, #128	; 0x80
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f840 	bl	8002956 <UART_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e036      	b.n	800294e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10b      	bne.n	80028fe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	3302      	adds	r3, #2
 80028fa:	61bb      	str	r3, [r7, #24]
 80028fc:	e007      	b.n	800290e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	3301      	adds	r3, #1
 800290c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1cf      	bne.n	80028c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2200      	movs	r2, #0
 800292e:	2140      	movs	r1, #64	; 0x40
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f810 	bl	8002956 <UART_WaitOnFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e006      	b.n	800294e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	e000      	b.n	800294e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800294c:	2302      	movs	r3, #2
  }
}
 800294e:	4618      	mov	r0, r3
 8002950:	3720      	adds	r7, #32
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b090      	sub	sp, #64	; 0x40
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	4613      	mov	r3, r2
 8002964:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002966:	e050      	b.n	8002a0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d04c      	beq.n	8002a0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <UART_WaitOnFlagUntilTimeout+0x30>
 8002976:	f7fe f8dd 	bl	8000b34 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002982:	429a      	cmp	r2, r3
 8002984:	d241      	bcs.n	8002a0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	330c      	adds	r3, #12
 800298c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	e853 3f00 	ldrex	r3, [r3]
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800299c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	330c      	adds	r3, #12
 80029a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029a6:	637a      	str	r2, [r7, #52]	; 0x34
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029ae:	e841 2300 	strex	r3, r2, [r1]
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1e5      	bne.n	8002986 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	3314      	adds	r3, #20
 80029c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	e853 3f00 	ldrex	r3, [r3]
 80029c8:	613b      	str	r3, [r7, #16]
   return(result);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	3314      	adds	r3, #20
 80029d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029da:	623a      	str	r2, [r7, #32]
 80029dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029de:	69f9      	ldr	r1, [r7, #28]
 80029e0:	6a3a      	ldr	r2, [r7, #32]
 80029e2:	e841 2300 	strex	r3, r2, [r1]
 80029e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1e5      	bne.n	80029ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e00f      	b.n	8002a2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4013      	ands	r3, r2
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	bf0c      	ite	eq
 8002a1a:	2301      	moveq	r3, #1
 8002a1c:	2300      	movne	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d09f      	beq.n	8002968 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3740      	adds	r7, #64	; 0x40
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002a74:	f023 030c 	bic.w	r3, r3, #12
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699a      	ldr	r2, [r3, #24]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a55      	ldr	r2, [pc, #340]	; (8002bf4 <UART_SetConfig+0x1c0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d103      	bne.n	8002aaa <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002aa2:	f7ff f83f 	bl	8001b24 <HAL_RCC_GetPCLK2Freq>
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	e002      	b.n	8002ab0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002aaa:	f7ff f827 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 8002aae:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab8:	d14c      	bne.n	8002b54 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009a      	lsls	r2, r3, #2
 8002ac4:	441a      	add	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad0:	4a49      	ldr	r2, [pc, #292]	; (8002bf8 <UART_SetConfig+0x1c4>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	0119      	lsls	r1, r3, #4
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009a      	lsls	r2, r3, #2
 8002ae4:	441a      	add	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002af0:	4b41      	ldr	r3, [pc, #260]	; (8002bf8 <UART_SetConfig+0x1c4>)
 8002af2:	fba3 0302 	umull	r0, r3, r3, r2
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2064      	movs	r0, #100	; 0x64
 8002afa:	fb00 f303 	mul.w	r3, r0, r3
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	3332      	adds	r3, #50	; 0x32
 8002b04:	4a3c      	ldr	r2, [pc, #240]	; (8002bf8 <UART_SetConfig+0x1c4>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b12:	4419      	add	r1, r3
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009a      	lsls	r2, r3, #2
 8002b1e:	441a      	add	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b2a:	4b33      	ldr	r3, [pc, #204]	; (8002bf8 <UART_SetConfig+0x1c4>)
 8002b2c:	fba3 0302 	umull	r0, r3, r3, r2
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	2064      	movs	r0, #100	; 0x64
 8002b34:	fb00 f303 	mul.w	r3, r0, r3
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	3332      	adds	r3, #50	; 0x32
 8002b3e:	4a2e      	ldr	r2, [pc, #184]	; (8002bf8 <UART_SetConfig+0x1c4>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	f003 0207 	and.w	r2, r3, #7
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	440a      	add	r2, r1
 8002b50:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b52:	e04a      	b.n	8002bea <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009a      	lsls	r2, r3, #2
 8002b5e:	441a      	add	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6a:	4a23      	ldr	r2, [pc, #140]	; (8002bf8 <UART_SetConfig+0x1c4>)
 8002b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	0119      	lsls	r1, r3, #4
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009a      	lsls	r2, r3, #2
 8002b7e:	441a      	add	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b8a:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <UART_SetConfig+0x1c4>)
 8002b8c:	fba3 0302 	umull	r0, r3, r3, r2
 8002b90:	095b      	lsrs	r3, r3, #5
 8002b92:	2064      	movs	r0, #100	; 0x64
 8002b94:	fb00 f303 	mul.w	r3, r0, r3
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	3332      	adds	r3, #50	; 0x32
 8002b9e:	4a16      	ldr	r2, [pc, #88]	; (8002bf8 <UART_SetConfig+0x1c4>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002baa:	4419      	add	r1, r3
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009a      	lsls	r2, r3, #2
 8002bb6:	441a      	add	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <UART_SetConfig+0x1c4>)
 8002bc4:	fba3 0302 	umull	r0, r3, r3, r2
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	2064      	movs	r0, #100	; 0x64
 8002bcc:	fb00 f303 	mul.w	r3, r0, r3
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	3332      	adds	r3, #50	; 0x32
 8002bd6:	4a08      	ldr	r2, [pc, #32]	; (8002bf8 <UART_SetConfig+0x1c4>)
 8002bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bdc:	095b      	lsrs	r3, r3, #5
 8002bde:	f003 020f 	and.w	r2, r3, #15
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	440a      	add	r2, r1
 8002be8:	609a      	str	r2, [r3, #8]
}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40013800 	.word	0x40013800
 8002bf8:	51eb851f 	.word	0x51eb851f

08002bfc <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}


int CANSPI_Initialize(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;


  RXM0reg.RXM0SIDH = 0x00;
 8002c02:	2300      	movs	r3, #0
 8002c04:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8002c06:	2300      	movs	r3, #0
 8002c08:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 8002c12:	2300      	movs	r3, #0
 8002c14:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8002c16:	2300      	movs	r3, #0
 8002c18:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	70fb      	strb	r3, [r7, #3]

  RXF0reg.RXF0SIDH = 0x00;
 8002c22:	2300      	movs	r3, #0
 8002c24:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8002c26:	2300      	movs	r3, #0
 8002c28:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 8002c32:	2300      	movs	r3, #0
 8002c34:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8002c36:	2308      	movs	r3, #8
 8002c38:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 8002c42:	2300      	movs	r3, #0
 8002c44:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8002c46:	2300      	movs	r3, #0
 8002c48:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 8002c52:	2300      	movs	r3, #0
 8002c54:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8002c56:	2300      	movs	r3, #0
 8002c58:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 8002c62:	2300      	movs	r3, #0
 8002c64:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8002c66:	2300      	movs	r3, #0
 8002c68:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 8002c72:	2300      	movs	r3, #0
 8002c74:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8002c76:	2308      	movs	r3, #8
 8002c78:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	72fb      	strb	r3, [r7, #11]


  if(!MCP2515_Initialize())
 8002c82:	f000 f945 	bl	8002f10 <MCP2515_Initialize>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f083 0301 	eor.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <CANSPI_Initialize+0x9c>
    return -1;
 8002c92:	f04f 33ff 	mov.w	r3, #4294967295
 8002c96:	e060      	b.n	8002d5a <CANSPI_Initialize+0x15e>


  if(!MCP2515_SetConfigMode())
 8002c98:	f000 f95c 	bl	8002f54 <MCP2515_SetConfigMode>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f083 0301 	eor.w	r3, r3, #1
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <CANSPI_Initialize+0xb2>
    return -2;
 8002ca8:	f06f 0301 	mvn.w	r3, #1
 8002cac:	e055      	b.n	8002d5a <CANSPI_Initialize+0x15e>

  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8002cae:	1d3b      	adds	r3, r7, #4
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	2123      	movs	r1, #35	; 0x23
 8002cb4:	2020      	movs	r0, #32
 8002cb6:	f000 f9f7 	bl	80030a8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8002cba:	463b      	mov	r3, r7
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2127      	movs	r1, #39	; 0x27
 8002cc0:	2024      	movs	r0, #36	; 0x24
 8002cc2:	f000 f9f1 	bl	80030a8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8002cc6:	f107 031c 	add.w	r3, r7, #28
 8002cca:	461a      	mov	r2, r3
 8002ccc:	2103      	movs	r1, #3
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f000 f9ea 	bl	80030a8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8002cd4:	f107 0318 	add.w	r3, r7, #24
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2107      	movs	r1, #7
 8002cdc:	2004      	movs	r0, #4
 8002cde:	f000 f9e3 	bl	80030a8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8002ce2:	f107 0314 	add.w	r3, r7, #20
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	210b      	movs	r1, #11
 8002cea:	2008      	movs	r0, #8
 8002cec:	f000 f9dc 	bl	80030a8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8002cf0:	f107 0310 	add.w	r3, r7, #16
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2113      	movs	r1, #19
 8002cf8:	2010      	movs	r0, #16
 8002cfa:	f000 f9d5 	bl	80030a8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8002cfe:	f107 030c 	add.w	r3, r7, #12
 8002d02:	461a      	mov	r2, r3
 8002d04:	2117      	movs	r1, #23
 8002d06:	2014      	movs	r0, #20
 8002d08:	f000 f9ce 	bl	80030a8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8002d0c:	f107 0308 	add.w	r3, r7, #8
 8002d10:	461a      	mov	r2, r3
 8002d12:	211b      	movs	r1, #27
 8002d14:	2018      	movs	r0, #24
 8002d16:	f000 f9c7 	bl	80030a8 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8002d1a:	2104      	movs	r1, #4
 8002d1c:	2060      	movs	r0, #96	; 0x60
 8002d1e:	f000 f99d 	bl	800305c <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8002d22:	2101      	movs	r1, #1
 8002d24:	2070      	movs	r0, #112	; 0x70
 8002d26:	f000 f999 	bl	800305c <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */


  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	202a      	movs	r0, #42	; 0x2a
 8002d2e:	f000 f995 	bl	800305c <MCP2515_WriteByte>


  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8002d32:	21e5      	movs	r1, #229	; 0xe5
 8002d34:	2029      	movs	r0, #41	; 0x29
 8002d36:	f000 f991 	bl	800305c <MCP2515_WriteByte>


  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8002d3a:	2183      	movs	r1, #131	; 0x83
 8002d3c:	2028      	movs	r0, #40	; 0x28
 8002d3e:	f000 f98d 	bl	800305c <MCP2515_WriteByte>

  if(!MCP2515_SetNormalMode())
 8002d42:	f000 f925 	bl	8002f90 <MCP2515_SetNormalMode>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f083 0301 	eor.w	r3, r3, #1
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <CANSPI_Initialize+0x15c>
    return -3;
 8002d52:	f06f 0302 	mvn.w	r3, #2
 8002d56:	e000      	b.n	8002d5a <CANSPI_Initialize+0x15e>

  return 1;
 8002d58:	2301      	movs	r3, #1
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <CANSPI_Receive>:
  return (returnValue);
}

/* Receiver CAN function */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b088      	sub	sp, #32
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  // get rx status of can
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8002d6e:	f000 f9c7 	bl	8003100 <MCP2515_GetRxStatus>
 8002d72:	4603      	mov	r3, r0
 8002d74:	733b      	strb	r3, [r7, #12]
  if (rxStatus.rxBuffer != 0)
 8002d76:	7b3b      	ldrb	r3, [r7, #12]
 8002d78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d066      	beq.n	8002e50 <CANSPI_Receive+0xee>
  {
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8002d82:	7b3b      	ldrb	r3, [r7, #12]
 8002d84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b40      	cmp	r3, #64	; 0x40
 8002d8c:	bf0c      	ite	eq
 8002d8e:	2301      	moveq	r3, #1
 8002d90:	2300      	movne	r3, #0
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	7b3b      	ldrb	r3, [r7, #12]
 8002d96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2bc0      	cmp	r3, #192	; 0xc0
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	4313      	orrs	r3, r2
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d007      	beq.n	8002dbe <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8002dae:	f107 0310 	add.w	r3, r7, #16
 8002db2:	220d      	movs	r2, #13
 8002db4:	4619      	mov	r1, r3
 8002db6:	2090      	movs	r0, #144	; 0x90
 8002db8:	f000 f92c 	bl	8003014 <MCP2515_ReadRxSequence>
 8002dbc:	e00c      	b.n	8002dd8 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8002dbe:	7b3b      	ldrb	r3, [r7, #12]
 8002dc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b80      	cmp	r3, #128	; 0x80
 8002dc8:	d106      	bne.n	8002dd8 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8002dca:	f107 0310 	add.w	r3, r7, #16
 8002dce:	220d      	movs	r2, #13
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	2094      	movs	r0, #148	; 0x94
 8002dd4:	f000 f91e 	bl	8003014 <MCP2515_ReadRxSequence>
    }


    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8002dd8:	7b3b      	ldrb	r3, [r7, #12]
 8002dda:	f003 0318 	and.w	r3, r3, #24
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b10      	cmp	r3, #16
 8002de2:	d10c      	bne.n	8002dfe <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8002dea:	7cb8      	ldrb	r0, [r7, #18]
 8002dec:	7cf9      	ldrb	r1, [r7, #19]
 8002dee:	7c3a      	ldrb	r2, [r7, #16]
 8002df0:	7c7b      	ldrb	r3, [r7, #17]
 8002df2:	f000 f832 	bl	8002e5a <convertReg2ExtendedCANid>
 8002df6:	4602      	mov	r2, r0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	605a      	str	r2, [r3, #4]
 8002dfc:	e00b      	b.n	8002e16 <CANSPI_Receive+0xb4>
    }
    else
    {

      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8002e04:	7c3b      	ldrb	r3, [r7, #16]
 8002e06:	7c7a      	ldrb	r2, [r7, #17]
 8002e08:	4611      	mov	r1, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 f863 	bl	8002ed6 <convertReg2StandardCANid>
 8002e10:	4602      	mov	r2, r0
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8002e16:	7d3a      	ldrb	r2, [r7, #20]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8002e1c:	7d7a      	ldrb	r2, [r7, #21]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8002e22:	7dba      	ldrb	r2, [r7, #22]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8002e28:	7dfa      	ldrb	r2, [r7, #23]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8002e2e:	7e3a      	ldrb	r2, [r7, #24]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8002e34:	7e7a      	ldrb	r2, [r7, #25]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8002e3a:	7eba      	ldrb	r2, [r7, #26]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8002e40:	7efa      	ldrb	r2, [r7, #27]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8002e46:	7f3a      	ldrb	r2, [r7, #28]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	741a      	strb	r2, [r3, #16]

    returnValue = 1;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 8002e50:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3720      	adds	r7, #32
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <convertReg2ExtendedCANid>:
  return (returnValue);
}


static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8002e5a:	b490      	push	{r4, r7}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	4604      	mov	r4, r0
 8002e62:	4608      	mov	r0, r1
 8002e64:	4611      	mov	r1, r2
 8002e66:	461a      	mov	r2, r3
 8002e68:	4623      	mov	r3, r4
 8002e6a:	71fb      	strb	r3, [r7, #7]
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	71bb      	strb	r3, [r7, #6]
 8002e70:	460b      	mov	r3, r1
 8002e72:	717b      	strb	r3, [r7, #5]
 8002e74:	4613      	mov	r3, r2
 8002e76:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8002e80:	793b      	ldrb	r3, [r7, #4]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8002e88:	793b      	ldrb	r3, [r7, #4]
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8002e8e:	797b      	ldrb	r3, [r7, #5]
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8002e94:	7bbb      	ldrb	r3, [r7, #14]
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4413      	add	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	021b      	lsls	r3, r3, #8
 8002eae:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8002ebe:	79bb      	ldrb	r3, [r7, #6]
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8002eca:	697b      	ldr	r3, [r7, #20]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc90      	pop	{r4, r7}
 8002ed4:	4770      	bx	lr

08002ed6 <convertReg2StandardCANid>:


static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4603      	mov	r3, r0
 8002ede:	460a      	mov	r2, r1
 8002ee0:	71fb      	strb	r3, [r7, #7]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8002ef0:	79bb      	ldrb	r3, [r7, #6]
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4413      	add	r3, r2
 8002efc:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 8002f02:	68fb      	ldr	r3, [r7, #12]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr
	...

08002f10 <MCP2515_Initialize>:
 * 2. Set the Modes Functions
 *
 */
/* Initialization CAN Function */
bool MCP2515_Initialize(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
	MCP2515_CS_HIGH();
 8002f16:	2201      	movs	r2, #1
 8002f18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f1c:	480b      	ldr	r0, [pc, #44]	; (8002f4c <MCP2515_Initialize+0x3c>)
 8002f1e:	f7fe f8a9 	bl	8001074 <HAL_GPIO_WritePin>
	uint8_t loop = 10;
 8002f22:	230a      	movs	r3, #10
 8002f24:	71fb      	strb	r3, [r7, #7]
	do
	{
		if (HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8002f26:	480a      	ldr	r0, [pc, #40]	; (8002f50 <MCP2515_Initialize+0x40>)
 8002f28:	f7ff fb04 	bl	8002534 <HAL_SPI_GetState>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <MCP2515_Initialize+0x26>
			return true;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e006      	b.n	8002f44 <MCP2515_Initialize+0x34>
		loop--;
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	71fb      	strb	r3, [r7, #7]
	} while (loop > 0);
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f1      	bne.n	8002f26 <MCP2515_Initialize+0x16>
	return false;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40020000 	.word	0x40020000
 8002f50:	20000078 	.word	0x20000078

08002f54 <MCP2515_SetConfigMode>:
 * with set to Configuration mode, and used Read
 * Register to check the Start Address of CAN and
 * MCP2515
 * */
bool MCP2515_SetConfigMode(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
	// Write byte to CAN control register, and Configure Mode register
	MCP2515_WriteByte(MCP2515_CANCTRL, MCP2515_ConfigMode);
 8002f5a:	2180      	movs	r1, #128	; 0x80
 8002f5c:	200f      	movs	r0, #15
 8002f5e:	f000 f87d 	bl	800305c <MCP2515_WriteByte>
	// Check CAN register address&Start address of MCP2515 is set to Configuration mode or not
	uint8_t loop = 10;
 8002f62:	230a      	movs	r3, #10
 8002f64:	71fb      	strb	r3, [r7, #7]
	do
	{
		if ((MCP2515_ReadByte(MCP2515_CANSTAT) & CANSTAT_ADDR) == MCP2515_ConfigMode)
 8002f66:	200e      	movs	r0, #14
 8002f68:	f000 f830 	bl	8002fcc <MCP2515_ReadByte>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8002f72:	2b80      	cmp	r3, #128	; 0x80
 8002f74:	d101      	bne.n	8002f7a <MCP2515_SetConfigMode+0x26>
			return true;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e006      	b.n	8002f88 <MCP2515_SetConfigMode+0x34>
		loop--;
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	71fb      	strb	r3, [r7, #7]
	} while (loop > 0);
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1ef      	bne.n	8002f66 <MCP2515_SetConfigMode+0x12>
	return false;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <MCP2515_SetNormalMode>:
/* Set Normal modes Function */
bool MCP2515_SetNormalMode(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
	// Write byte to CAN control register, and Set to normal mode
	MCP2515_WriteByte(MCP2515_CANCTRL, MCP2515_NomalMode);
 8002f96:	2100      	movs	r1, #0
 8002f98:	200f      	movs	r0, #15
 8002f9a:	f000 f85f 	bl	800305c <MCP2515_WriteByte>
	// Check CAN register address&Start address of MCP2515 is set to normal mode or not
	uint8_t loop = 10;
 8002f9e:	230a      	movs	r3, #10
 8002fa0:	71fb      	strb	r3, [r7, #7]
	do
	{
		if ((MCP2515_ReadByte(MCP2515_CANSTAT) & CANSTAT_ADDR) == MCP2515_NomalMode)
 8002fa2:	200e      	movs	r0, #14
 8002fa4:	f000 f812 	bl	8002fcc <MCP2515_ReadByte>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <MCP2515_SetNormalMode+0x26>
			return true;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e006      	b.n	8002fc4 <MCP2515_SetNormalMode+0x34>
		loop--;
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	71fb      	strb	r3, [r7, #7]
	} while (loop > 0);
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1ef      	bne.n	8002fa2 <MCP2515_SetNormalMode+0x12>
	return false;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <MCP2515_ReadByte>:
	SPI_Tx(MCP2515_RESET);
	MCP2515_CS_HIGH();
}
/* Read Byte Functions */
uint8_t MCP2515_ReadByte(uint8_t address)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	71fb      	strb	r3, [r7, #7]
	uint8_t retVal;
	MCP2515_CS_LOW();
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fdc:	480c      	ldr	r0, [pc, #48]	; (8003010 <MCP2515_ReadByte+0x44>)
 8002fde:	f7fe f849 	bl	8001074 <HAL_GPIO_WritePin>
	SPI_Tx(MCP2515_READ);
 8002fe2:	2003      	movs	r0, #3
 8002fe4:	f000 f8aa 	bl	800313c <SPI_Tx>
	SPI_Tx(address);
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 f8a6 	bl	800313c <SPI_Tx>
	retVal = SPI_Rx();
 8002ff0:	f000 f8ca 	bl	8003188 <SPI_Rx>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	73fb      	strb	r3, [r7, #15]
	MCP2515_CS_HIGH();
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ffe:	4804      	ldr	r0, [pc, #16]	; (8003010 <MCP2515_ReadByte+0x44>)
 8003000:	f7fe f838 	bl	8001074 <HAL_GPIO_WritePin>
	return retVal;
 8003004:	7bfb      	ldrb	r3, [r7, #15]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40020000 	.word	0x40020000

08003014 <MCP2515_ReadRxSequence>:
/* Read Byte Sequence Functions */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	71fb      	strb	r3, [r7, #7]
 8003020:	4613      	mov	r3, r2
 8003022:	71bb      	strb	r3, [r7, #6]
	MCP2515_CS_LOW();
 8003024:	2200      	movs	r2, #0
 8003026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800302a:	480b      	ldr	r0, [pc, #44]	; (8003058 <MCP2515_ReadRxSequence+0x44>)
 800302c:	f7fe f822 	bl	8001074 <HAL_GPIO_WritePin>
	SPI_Tx(instruction);
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	4618      	mov	r0, r3
 8003034:	f000 f882 	bl	800313c <SPI_Tx>
	SPI_RxBuffer(data, length);
 8003038:	79bb      	ldrb	r3, [r7, #6]
 800303a:	4619      	mov	r1, r3
 800303c:	6838      	ldr	r0, [r7, #0]
 800303e:	f000 f8b3 	bl	80031a8 <SPI_RxBuffer>
	MCP2515_CS_HIGH();
 8003042:	2201      	movs	r2, #1
 8003044:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003048:	4803      	ldr	r0, [pc, #12]	; (8003058 <MCP2515_ReadRxSequence+0x44>)
 800304a:	f7fe f813 	bl	8001074 <HAL_GPIO_WritePin>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40020000 	.word	0x40020000

0800305c <MCP2515_WriteByte>:
/* Write Byte Functions */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	460a      	mov	r2, r1
 8003066:	71fb      	strb	r3, [r7, #7]
 8003068:	4613      	mov	r3, r2
 800306a:	71bb      	strb	r3, [r7, #6]
	MCP2515_CS_LOW();
 800306c:	2200      	movs	r2, #0
 800306e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003072:	480c      	ldr	r0, [pc, #48]	; (80030a4 <MCP2515_WriteByte+0x48>)
 8003074:	f7fd fffe 	bl	8001074 <HAL_GPIO_WritePin>
	SPI_Tx(MCP2515_WRITE);
 8003078:	2002      	movs	r0, #2
 800307a:	f000 f85f 	bl	800313c <SPI_Tx>
	SPI_Tx(address);
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	4618      	mov	r0, r3
 8003082:	f000 f85b 	bl	800313c <SPI_Tx>
	SPI_Tx(data);
 8003086:	79bb      	ldrb	r3, [r7, #6]
 8003088:	4618      	mov	r0, r3
 800308a:	f000 f857 	bl	800313c <SPI_Tx>
	MCP2515_CS_HIGH();
 800308e:	2201      	movs	r2, #1
 8003090:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003094:	4803      	ldr	r0, [pc, #12]	; (80030a4 <MCP2515_WriteByte+0x48>)
 8003096:	f7fd ffed 	bl	8001074 <HAL_GPIO_WritePin>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40020000 	.word	0x40020000

080030a8 <MCP2515_WriteByteSequence>:
/* Write Byte Sequence Functions */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	603a      	str	r2, [r7, #0]
 80030b2:	71fb      	strb	r3, [r7, #7]
 80030b4:	460b      	mov	r3, r1
 80030b6:	71bb      	strb	r3, [r7, #6]
	MCP2515_CS_LOW();
 80030b8:	2200      	movs	r2, #0
 80030ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030be:	480f      	ldr	r0, [pc, #60]	; (80030fc <MCP2515_WriteByteSequence+0x54>)
 80030c0:	f7fd ffd8 	bl	8001074 <HAL_GPIO_WritePin>
	SPI_Tx(MCP2515_WRITE);
 80030c4:	2002      	movs	r0, #2
 80030c6:	f000 f839 	bl	800313c <SPI_Tx>
	SPI_Tx(startAddress);
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 f835 	bl	800313c <SPI_Tx>
	SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80030d2:	79ba      	ldrb	r2, [r7, #6]
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	4619      	mov	r1, r3
 80030e0:	6838      	ldr	r0, [r7, #0]
 80030e2:	f000 f83d 	bl	8003160 <SPI_TxBuffer>
	MCP2515_CS_HIGH();
 80030e6:	2201      	movs	r2, #1
 80030e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030ec:	4803      	ldr	r0, [pc, #12]	; (80030fc <MCP2515_WriteByteSequence+0x54>)
 80030ee:	f7fd ffc1 	bl	8001074 <HAL_GPIO_WritePin>
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40020000 	.word	0x40020000

08003100 <MCP2515_GetRxStatus>:
	MCP2515_CS_HIGH();
	return retVal;
}
/* Get status functions */
uint8_t MCP2515_GetRxStatus(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
	uint8_t retVal;
	MCP2515_CS_LOW();
 8003106:	2200      	movs	r2, #0
 8003108:	f44f 7180 	mov.w	r1, #256	; 0x100
 800310c:	480a      	ldr	r0, [pc, #40]	; (8003138 <MCP2515_GetRxStatus+0x38>)
 800310e:	f7fd ffb1 	bl	8001074 <HAL_GPIO_WritePin>
	SPI_Tx(MCP2515_RX_STATUS);
 8003112:	20b0      	movs	r0, #176	; 0xb0
 8003114:	f000 f812 	bl	800313c <SPI_Tx>
	retVal = SPI_Rx();
 8003118:	f000 f836 	bl	8003188 <SPI_Rx>
 800311c:	4603      	mov	r3, r0
 800311e:	71fb      	strb	r3, [r7, #7]
	MCP2515_CS_HIGH();
 8003120:	2201      	movs	r2, #1
 8003122:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003126:	4804      	ldr	r0, [pc, #16]	; (8003138 <MCP2515_GetRxStatus+0x38>)
 8003128:	f7fd ffa4 	bl	8001074 <HAL_GPIO_WritePin>
	return retVal;
 800312c:	79fb      	ldrb	r3, [r7, #7]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40020000 	.word	0x40020000

0800313c <SPI_Tx>:
	SPI_Tx(data);
	MCP2515_CS_HIGH();
}

static void SPI_Tx(uint8_t data)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8003146:	1df9      	adds	r1, r7, #7
 8003148:	230a      	movs	r3, #10
 800314a:	2201      	movs	r2, #1
 800314c:	4803      	ldr	r0, [pc, #12]	; (800315c <SPI_Tx+0x20>)
 800314e:	f7fe fde6 	bl	8001d1e <HAL_SPI_Transmit>
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000078 	.word	0x20000078

08003160 <SPI_TxBuffer>:

static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	b29a      	uxth	r2, r3
 8003170:	230a      	movs	r3, #10
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4803      	ldr	r0, [pc, #12]	; (8003184 <SPI_TxBuffer+0x24>)
 8003176:	f7fe fdd2 	bl	8001d1e <HAL_SPI_Transmit>
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000078 	.word	0x20000078

08003188 <SPI_Rx>:

static uint8_t SPI_Rx(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
	uint8_t retVal;
	HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800318e:	1df9      	adds	r1, r7, #7
 8003190:	230a      	movs	r3, #10
 8003192:	2201      	movs	r2, #1
 8003194:	4803      	ldr	r0, [pc, #12]	; (80031a4 <SPI_Rx+0x1c>)
 8003196:	f7fe ff05 	bl	8001fa4 <HAL_SPI_Receive>
	return retVal;
 800319a:	79fb      	ldrb	r3, [r7, #7]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000078 	.word	0x20000078

080031a8 <SPI_RxBuffer>:

static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	230a      	movs	r3, #10
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4803      	ldr	r0, [pc, #12]	; (80031cc <SPI_RxBuffer+0x24>)
 80031be:	f7fe fef1 	bl	8001fa4 <HAL_SPI_Receive>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000078 	.word	0x20000078

080031d0 <sniprintf>:
 80031d0:	b40c      	push	{r2, r3}
 80031d2:	b530      	push	{r4, r5, lr}
 80031d4:	4b17      	ldr	r3, [pc, #92]	; (8003234 <sniprintf+0x64>)
 80031d6:	1e0c      	subs	r4, r1, #0
 80031d8:	681d      	ldr	r5, [r3, #0]
 80031da:	b09d      	sub	sp, #116	; 0x74
 80031dc:	da08      	bge.n	80031f0 <sniprintf+0x20>
 80031de:	238b      	movs	r3, #139	; 0x8b
 80031e0:	f04f 30ff 	mov.w	r0, #4294967295
 80031e4:	602b      	str	r3, [r5, #0]
 80031e6:	b01d      	add	sp, #116	; 0x74
 80031e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80031ec:	b002      	add	sp, #8
 80031ee:	4770      	bx	lr
 80031f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80031f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80031f8:	bf0c      	ite	eq
 80031fa:	4623      	moveq	r3, r4
 80031fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003200:	9304      	str	r3, [sp, #16]
 8003202:	9307      	str	r3, [sp, #28]
 8003204:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003208:	9002      	str	r0, [sp, #8]
 800320a:	9006      	str	r0, [sp, #24]
 800320c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003210:	4628      	mov	r0, r5
 8003212:	ab21      	add	r3, sp, #132	; 0x84
 8003214:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003216:	a902      	add	r1, sp, #8
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	f000 f9af 	bl	800357c <_svfiprintf_r>
 800321e:	1c43      	adds	r3, r0, #1
 8003220:	bfbc      	itt	lt
 8003222:	238b      	movlt	r3, #139	; 0x8b
 8003224:	602b      	strlt	r3, [r5, #0]
 8003226:	2c00      	cmp	r4, #0
 8003228:	d0dd      	beq.n	80031e6 <sniprintf+0x16>
 800322a:	2200      	movs	r2, #0
 800322c:	9b02      	ldr	r3, [sp, #8]
 800322e:	701a      	strb	r2, [r3, #0]
 8003230:	e7d9      	b.n	80031e6 <sniprintf+0x16>
 8003232:	bf00      	nop
 8003234:	20000058 	.word	0x20000058

08003238 <siprintf>:
 8003238:	b40e      	push	{r1, r2, r3}
 800323a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800323e:	b500      	push	{lr}
 8003240:	b09c      	sub	sp, #112	; 0x70
 8003242:	ab1d      	add	r3, sp, #116	; 0x74
 8003244:	9002      	str	r0, [sp, #8]
 8003246:	9006      	str	r0, [sp, #24]
 8003248:	9107      	str	r1, [sp, #28]
 800324a:	9104      	str	r1, [sp, #16]
 800324c:	4808      	ldr	r0, [pc, #32]	; (8003270 <siprintf+0x38>)
 800324e:	4909      	ldr	r1, [pc, #36]	; (8003274 <siprintf+0x3c>)
 8003250:	f853 2b04 	ldr.w	r2, [r3], #4
 8003254:	9105      	str	r1, [sp, #20]
 8003256:	6800      	ldr	r0, [r0, #0]
 8003258:	a902      	add	r1, sp, #8
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	f000 f98e 	bl	800357c <_svfiprintf_r>
 8003260:	2200      	movs	r2, #0
 8003262:	9b02      	ldr	r3, [sp, #8]
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	b01c      	add	sp, #112	; 0x70
 8003268:	f85d eb04 	ldr.w	lr, [sp], #4
 800326c:	b003      	add	sp, #12
 800326e:	4770      	bx	lr
 8003270:	20000058 	.word	0x20000058
 8003274:	ffff0208 	.word	0xffff0208

08003278 <memset>:
 8003278:	4603      	mov	r3, r0
 800327a:	4402      	add	r2, r0
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <memset+0xa>
 8003280:	4770      	bx	lr
 8003282:	f803 1b01 	strb.w	r1, [r3], #1
 8003286:	e7f9      	b.n	800327c <memset+0x4>

08003288 <__errno>:
 8003288:	4b01      	ldr	r3, [pc, #4]	; (8003290 <__errno+0x8>)
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	20000058 	.word	0x20000058

08003294 <__libc_init_array>:
 8003294:	b570      	push	{r4, r5, r6, lr}
 8003296:	2600      	movs	r6, #0
 8003298:	4d0c      	ldr	r5, [pc, #48]	; (80032cc <__libc_init_array+0x38>)
 800329a:	4c0d      	ldr	r4, [pc, #52]	; (80032d0 <__libc_init_array+0x3c>)
 800329c:	1b64      	subs	r4, r4, r5
 800329e:	10a4      	asrs	r4, r4, #2
 80032a0:	42a6      	cmp	r6, r4
 80032a2:	d109      	bne.n	80032b8 <__libc_init_array+0x24>
 80032a4:	f000 fc7a 	bl	8003b9c <_init>
 80032a8:	2600      	movs	r6, #0
 80032aa:	4d0a      	ldr	r5, [pc, #40]	; (80032d4 <__libc_init_array+0x40>)
 80032ac:	4c0a      	ldr	r4, [pc, #40]	; (80032d8 <__libc_init_array+0x44>)
 80032ae:	1b64      	subs	r4, r4, r5
 80032b0:	10a4      	asrs	r4, r4, #2
 80032b2:	42a6      	cmp	r6, r4
 80032b4:	d105      	bne.n	80032c2 <__libc_init_array+0x2e>
 80032b6:	bd70      	pop	{r4, r5, r6, pc}
 80032b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032bc:	4798      	blx	r3
 80032be:	3601      	adds	r6, #1
 80032c0:	e7ee      	b.n	80032a0 <__libc_init_array+0xc>
 80032c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c6:	4798      	blx	r3
 80032c8:	3601      	adds	r6, #1
 80032ca:	e7f2      	b.n	80032b2 <__libc_init_array+0x1e>
 80032cc:	08003c44 	.word	0x08003c44
 80032d0:	08003c44 	.word	0x08003c44
 80032d4:	08003c44 	.word	0x08003c44
 80032d8:	08003c48 	.word	0x08003c48

080032dc <__retarget_lock_acquire_recursive>:
 80032dc:	4770      	bx	lr

080032de <__retarget_lock_release_recursive>:
 80032de:	4770      	bx	lr

080032e0 <_free_r>:
 80032e0:	b538      	push	{r3, r4, r5, lr}
 80032e2:	4605      	mov	r5, r0
 80032e4:	2900      	cmp	r1, #0
 80032e6:	d040      	beq.n	800336a <_free_r+0x8a>
 80032e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032ec:	1f0c      	subs	r4, r1, #4
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bfb8      	it	lt
 80032f2:	18e4      	addlt	r4, r4, r3
 80032f4:	f000 f8dc 	bl	80034b0 <__malloc_lock>
 80032f8:	4a1c      	ldr	r2, [pc, #112]	; (800336c <_free_r+0x8c>)
 80032fa:	6813      	ldr	r3, [r2, #0]
 80032fc:	b933      	cbnz	r3, 800330c <_free_r+0x2c>
 80032fe:	6063      	str	r3, [r4, #4]
 8003300:	6014      	str	r4, [r2, #0]
 8003302:	4628      	mov	r0, r5
 8003304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003308:	f000 b8d8 	b.w	80034bc <__malloc_unlock>
 800330c:	42a3      	cmp	r3, r4
 800330e:	d908      	bls.n	8003322 <_free_r+0x42>
 8003310:	6820      	ldr	r0, [r4, #0]
 8003312:	1821      	adds	r1, r4, r0
 8003314:	428b      	cmp	r3, r1
 8003316:	bf01      	itttt	eq
 8003318:	6819      	ldreq	r1, [r3, #0]
 800331a:	685b      	ldreq	r3, [r3, #4]
 800331c:	1809      	addeq	r1, r1, r0
 800331e:	6021      	streq	r1, [r4, #0]
 8003320:	e7ed      	b.n	80032fe <_free_r+0x1e>
 8003322:	461a      	mov	r2, r3
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	b10b      	cbz	r3, 800332c <_free_r+0x4c>
 8003328:	42a3      	cmp	r3, r4
 800332a:	d9fa      	bls.n	8003322 <_free_r+0x42>
 800332c:	6811      	ldr	r1, [r2, #0]
 800332e:	1850      	adds	r0, r2, r1
 8003330:	42a0      	cmp	r0, r4
 8003332:	d10b      	bne.n	800334c <_free_r+0x6c>
 8003334:	6820      	ldr	r0, [r4, #0]
 8003336:	4401      	add	r1, r0
 8003338:	1850      	adds	r0, r2, r1
 800333a:	4283      	cmp	r3, r0
 800333c:	6011      	str	r1, [r2, #0]
 800333e:	d1e0      	bne.n	8003302 <_free_r+0x22>
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4408      	add	r0, r1
 8003346:	6010      	str	r0, [r2, #0]
 8003348:	6053      	str	r3, [r2, #4]
 800334a:	e7da      	b.n	8003302 <_free_r+0x22>
 800334c:	d902      	bls.n	8003354 <_free_r+0x74>
 800334e:	230c      	movs	r3, #12
 8003350:	602b      	str	r3, [r5, #0]
 8003352:	e7d6      	b.n	8003302 <_free_r+0x22>
 8003354:	6820      	ldr	r0, [r4, #0]
 8003356:	1821      	adds	r1, r4, r0
 8003358:	428b      	cmp	r3, r1
 800335a:	bf01      	itttt	eq
 800335c:	6819      	ldreq	r1, [r3, #0]
 800335e:	685b      	ldreq	r3, [r3, #4]
 8003360:	1809      	addeq	r1, r1, r0
 8003362:	6021      	streq	r1, [r4, #0]
 8003364:	6063      	str	r3, [r4, #4]
 8003366:	6054      	str	r4, [r2, #4]
 8003368:	e7cb      	b.n	8003302 <_free_r+0x22>
 800336a:	bd38      	pop	{r3, r4, r5, pc}
 800336c:	20000274 	.word	0x20000274

08003370 <sbrk_aligned>:
 8003370:	b570      	push	{r4, r5, r6, lr}
 8003372:	4e0e      	ldr	r6, [pc, #56]	; (80033ac <sbrk_aligned+0x3c>)
 8003374:	460c      	mov	r4, r1
 8003376:	6831      	ldr	r1, [r6, #0]
 8003378:	4605      	mov	r5, r0
 800337a:	b911      	cbnz	r1, 8003382 <sbrk_aligned+0x12>
 800337c:	f000 fbaa 	bl	8003ad4 <_sbrk_r>
 8003380:	6030      	str	r0, [r6, #0]
 8003382:	4621      	mov	r1, r4
 8003384:	4628      	mov	r0, r5
 8003386:	f000 fba5 	bl	8003ad4 <_sbrk_r>
 800338a:	1c43      	adds	r3, r0, #1
 800338c:	d00a      	beq.n	80033a4 <sbrk_aligned+0x34>
 800338e:	1cc4      	adds	r4, r0, #3
 8003390:	f024 0403 	bic.w	r4, r4, #3
 8003394:	42a0      	cmp	r0, r4
 8003396:	d007      	beq.n	80033a8 <sbrk_aligned+0x38>
 8003398:	1a21      	subs	r1, r4, r0
 800339a:	4628      	mov	r0, r5
 800339c:	f000 fb9a 	bl	8003ad4 <_sbrk_r>
 80033a0:	3001      	adds	r0, #1
 80033a2:	d101      	bne.n	80033a8 <sbrk_aligned+0x38>
 80033a4:	f04f 34ff 	mov.w	r4, #4294967295
 80033a8:	4620      	mov	r0, r4
 80033aa:	bd70      	pop	{r4, r5, r6, pc}
 80033ac:	20000278 	.word	0x20000278

080033b0 <_malloc_r>:
 80033b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033b4:	1ccd      	adds	r5, r1, #3
 80033b6:	f025 0503 	bic.w	r5, r5, #3
 80033ba:	3508      	adds	r5, #8
 80033bc:	2d0c      	cmp	r5, #12
 80033be:	bf38      	it	cc
 80033c0:	250c      	movcc	r5, #12
 80033c2:	2d00      	cmp	r5, #0
 80033c4:	4607      	mov	r7, r0
 80033c6:	db01      	blt.n	80033cc <_malloc_r+0x1c>
 80033c8:	42a9      	cmp	r1, r5
 80033ca:	d905      	bls.n	80033d8 <_malloc_r+0x28>
 80033cc:	230c      	movs	r3, #12
 80033ce:	2600      	movs	r6, #0
 80033d0:	603b      	str	r3, [r7, #0]
 80033d2:	4630      	mov	r0, r6
 80033d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80034ac <_malloc_r+0xfc>
 80033dc:	f000 f868 	bl	80034b0 <__malloc_lock>
 80033e0:	f8d8 3000 	ldr.w	r3, [r8]
 80033e4:	461c      	mov	r4, r3
 80033e6:	bb5c      	cbnz	r4, 8003440 <_malloc_r+0x90>
 80033e8:	4629      	mov	r1, r5
 80033ea:	4638      	mov	r0, r7
 80033ec:	f7ff ffc0 	bl	8003370 <sbrk_aligned>
 80033f0:	1c43      	adds	r3, r0, #1
 80033f2:	4604      	mov	r4, r0
 80033f4:	d155      	bne.n	80034a2 <_malloc_r+0xf2>
 80033f6:	f8d8 4000 	ldr.w	r4, [r8]
 80033fa:	4626      	mov	r6, r4
 80033fc:	2e00      	cmp	r6, #0
 80033fe:	d145      	bne.n	800348c <_malloc_r+0xdc>
 8003400:	2c00      	cmp	r4, #0
 8003402:	d048      	beq.n	8003496 <_malloc_r+0xe6>
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	4631      	mov	r1, r6
 8003408:	4638      	mov	r0, r7
 800340a:	eb04 0903 	add.w	r9, r4, r3
 800340e:	f000 fb61 	bl	8003ad4 <_sbrk_r>
 8003412:	4581      	cmp	r9, r0
 8003414:	d13f      	bne.n	8003496 <_malloc_r+0xe6>
 8003416:	6821      	ldr	r1, [r4, #0]
 8003418:	4638      	mov	r0, r7
 800341a:	1a6d      	subs	r5, r5, r1
 800341c:	4629      	mov	r1, r5
 800341e:	f7ff ffa7 	bl	8003370 <sbrk_aligned>
 8003422:	3001      	adds	r0, #1
 8003424:	d037      	beq.n	8003496 <_malloc_r+0xe6>
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	442b      	add	r3, r5
 800342a:	6023      	str	r3, [r4, #0]
 800342c:	f8d8 3000 	ldr.w	r3, [r8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d038      	beq.n	80034a6 <_malloc_r+0xf6>
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	42a2      	cmp	r2, r4
 8003438:	d12b      	bne.n	8003492 <_malloc_r+0xe2>
 800343a:	2200      	movs	r2, #0
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	e00f      	b.n	8003460 <_malloc_r+0xb0>
 8003440:	6822      	ldr	r2, [r4, #0]
 8003442:	1b52      	subs	r2, r2, r5
 8003444:	d41f      	bmi.n	8003486 <_malloc_r+0xd6>
 8003446:	2a0b      	cmp	r2, #11
 8003448:	d917      	bls.n	800347a <_malloc_r+0xca>
 800344a:	1961      	adds	r1, r4, r5
 800344c:	42a3      	cmp	r3, r4
 800344e:	6025      	str	r5, [r4, #0]
 8003450:	bf18      	it	ne
 8003452:	6059      	strne	r1, [r3, #4]
 8003454:	6863      	ldr	r3, [r4, #4]
 8003456:	bf08      	it	eq
 8003458:	f8c8 1000 	streq.w	r1, [r8]
 800345c:	5162      	str	r2, [r4, r5]
 800345e:	604b      	str	r3, [r1, #4]
 8003460:	4638      	mov	r0, r7
 8003462:	f104 060b 	add.w	r6, r4, #11
 8003466:	f000 f829 	bl	80034bc <__malloc_unlock>
 800346a:	f026 0607 	bic.w	r6, r6, #7
 800346e:	1d23      	adds	r3, r4, #4
 8003470:	1af2      	subs	r2, r6, r3
 8003472:	d0ae      	beq.n	80033d2 <_malloc_r+0x22>
 8003474:	1b9b      	subs	r3, r3, r6
 8003476:	50a3      	str	r3, [r4, r2]
 8003478:	e7ab      	b.n	80033d2 <_malloc_r+0x22>
 800347a:	42a3      	cmp	r3, r4
 800347c:	6862      	ldr	r2, [r4, #4]
 800347e:	d1dd      	bne.n	800343c <_malloc_r+0x8c>
 8003480:	f8c8 2000 	str.w	r2, [r8]
 8003484:	e7ec      	b.n	8003460 <_malloc_r+0xb0>
 8003486:	4623      	mov	r3, r4
 8003488:	6864      	ldr	r4, [r4, #4]
 800348a:	e7ac      	b.n	80033e6 <_malloc_r+0x36>
 800348c:	4634      	mov	r4, r6
 800348e:	6876      	ldr	r6, [r6, #4]
 8003490:	e7b4      	b.n	80033fc <_malloc_r+0x4c>
 8003492:	4613      	mov	r3, r2
 8003494:	e7cc      	b.n	8003430 <_malloc_r+0x80>
 8003496:	230c      	movs	r3, #12
 8003498:	4638      	mov	r0, r7
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	f000 f80e 	bl	80034bc <__malloc_unlock>
 80034a0:	e797      	b.n	80033d2 <_malloc_r+0x22>
 80034a2:	6025      	str	r5, [r4, #0]
 80034a4:	e7dc      	b.n	8003460 <_malloc_r+0xb0>
 80034a6:	605b      	str	r3, [r3, #4]
 80034a8:	deff      	udf	#255	; 0xff
 80034aa:	bf00      	nop
 80034ac:	20000274 	.word	0x20000274

080034b0 <__malloc_lock>:
 80034b0:	4801      	ldr	r0, [pc, #4]	; (80034b8 <__malloc_lock+0x8>)
 80034b2:	f7ff bf13 	b.w	80032dc <__retarget_lock_acquire_recursive>
 80034b6:	bf00      	nop
 80034b8:	20000270 	.word	0x20000270

080034bc <__malloc_unlock>:
 80034bc:	4801      	ldr	r0, [pc, #4]	; (80034c4 <__malloc_unlock+0x8>)
 80034be:	f7ff bf0e 	b.w	80032de <__retarget_lock_release_recursive>
 80034c2:	bf00      	nop
 80034c4:	20000270 	.word	0x20000270

080034c8 <__ssputs_r>:
 80034c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034cc:	461f      	mov	r7, r3
 80034ce:	688e      	ldr	r6, [r1, #8]
 80034d0:	4682      	mov	sl, r0
 80034d2:	42be      	cmp	r6, r7
 80034d4:	460c      	mov	r4, r1
 80034d6:	4690      	mov	r8, r2
 80034d8:	680b      	ldr	r3, [r1, #0]
 80034da:	d82c      	bhi.n	8003536 <__ssputs_r+0x6e>
 80034dc:	898a      	ldrh	r2, [r1, #12]
 80034de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034e2:	d026      	beq.n	8003532 <__ssputs_r+0x6a>
 80034e4:	6965      	ldr	r5, [r4, #20]
 80034e6:	6909      	ldr	r1, [r1, #16]
 80034e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034ec:	eba3 0901 	sub.w	r9, r3, r1
 80034f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034f4:	1c7b      	adds	r3, r7, #1
 80034f6:	444b      	add	r3, r9
 80034f8:	106d      	asrs	r5, r5, #1
 80034fa:	429d      	cmp	r5, r3
 80034fc:	bf38      	it	cc
 80034fe:	461d      	movcc	r5, r3
 8003500:	0553      	lsls	r3, r2, #21
 8003502:	d527      	bpl.n	8003554 <__ssputs_r+0x8c>
 8003504:	4629      	mov	r1, r5
 8003506:	f7ff ff53 	bl	80033b0 <_malloc_r>
 800350a:	4606      	mov	r6, r0
 800350c:	b360      	cbz	r0, 8003568 <__ssputs_r+0xa0>
 800350e:	464a      	mov	r2, r9
 8003510:	6921      	ldr	r1, [r4, #16]
 8003512:	f000 fafd 	bl	8003b10 <memcpy>
 8003516:	89a3      	ldrh	r3, [r4, #12]
 8003518:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800351c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003520:	81a3      	strh	r3, [r4, #12]
 8003522:	6126      	str	r6, [r4, #16]
 8003524:	444e      	add	r6, r9
 8003526:	6026      	str	r6, [r4, #0]
 8003528:	463e      	mov	r6, r7
 800352a:	6165      	str	r5, [r4, #20]
 800352c:	eba5 0509 	sub.w	r5, r5, r9
 8003530:	60a5      	str	r5, [r4, #8]
 8003532:	42be      	cmp	r6, r7
 8003534:	d900      	bls.n	8003538 <__ssputs_r+0x70>
 8003536:	463e      	mov	r6, r7
 8003538:	4632      	mov	r2, r6
 800353a:	4641      	mov	r1, r8
 800353c:	6820      	ldr	r0, [r4, #0]
 800353e:	f000 faaf 	bl	8003aa0 <memmove>
 8003542:	2000      	movs	r0, #0
 8003544:	68a3      	ldr	r3, [r4, #8]
 8003546:	1b9b      	subs	r3, r3, r6
 8003548:	60a3      	str	r3, [r4, #8]
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	4433      	add	r3, r6
 800354e:	6023      	str	r3, [r4, #0]
 8003550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003554:	462a      	mov	r2, r5
 8003556:	f000 fae9 	bl	8003b2c <_realloc_r>
 800355a:	4606      	mov	r6, r0
 800355c:	2800      	cmp	r0, #0
 800355e:	d1e0      	bne.n	8003522 <__ssputs_r+0x5a>
 8003560:	4650      	mov	r0, sl
 8003562:	6921      	ldr	r1, [r4, #16]
 8003564:	f7ff febc 	bl	80032e0 <_free_r>
 8003568:	230c      	movs	r3, #12
 800356a:	f8ca 3000 	str.w	r3, [sl]
 800356e:	89a3      	ldrh	r3, [r4, #12]
 8003570:	f04f 30ff 	mov.w	r0, #4294967295
 8003574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003578:	81a3      	strh	r3, [r4, #12]
 800357a:	e7e9      	b.n	8003550 <__ssputs_r+0x88>

0800357c <_svfiprintf_r>:
 800357c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003580:	4698      	mov	r8, r3
 8003582:	898b      	ldrh	r3, [r1, #12]
 8003584:	4607      	mov	r7, r0
 8003586:	061b      	lsls	r3, r3, #24
 8003588:	460d      	mov	r5, r1
 800358a:	4614      	mov	r4, r2
 800358c:	b09d      	sub	sp, #116	; 0x74
 800358e:	d50e      	bpl.n	80035ae <_svfiprintf_r+0x32>
 8003590:	690b      	ldr	r3, [r1, #16]
 8003592:	b963      	cbnz	r3, 80035ae <_svfiprintf_r+0x32>
 8003594:	2140      	movs	r1, #64	; 0x40
 8003596:	f7ff ff0b 	bl	80033b0 <_malloc_r>
 800359a:	6028      	str	r0, [r5, #0]
 800359c:	6128      	str	r0, [r5, #16]
 800359e:	b920      	cbnz	r0, 80035aa <_svfiprintf_r+0x2e>
 80035a0:	230c      	movs	r3, #12
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	f04f 30ff 	mov.w	r0, #4294967295
 80035a8:	e0d0      	b.n	800374c <_svfiprintf_r+0x1d0>
 80035aa:	2340      	movs	r3, #64	; 0x40
 80035ac:	616b      	str	r3, [r5, #20]
 80035ae:	2300      	movs	r3, #0
 80035b0:	9309      	str	r3, [sp, #36]	; 0x24
 80035b2:	2320      	movs	r3, #32
 80035b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035b8:	2330      	movs	r3, #48	; 0x30
 80035ba:	f04f 0901 	mov.w	r9, #1
 80035be:	f8cd 800c 	str.w	r8, [sp, #12]
 80035c2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003764 <_svfiprintf_r+0x1e8>
 80035c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035ca:	4623      	mov	r3, r4
 80035cc:	469a      	mov	sl, r3
 80035ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035d2:	b10a      	cbz	r2, 80035d8 <_svfiprintf_r+0x5c>
 80035d4:	2a25      	cmp	r2, #37	; 0x25
 80035d6:	d1f9      	bne.n	80035cc <_svfiprintf_r+0x50>
 80035d8:	ebba 0b04 	subs.w	fp, sl, r4
 80035dc:	d00b      	beq.n	80035f6 <_svfiprintf_r+0x7a>
 80035de:	465b      	mov	r3, fp
 80035e0:	4622      	mov	r2, r4
 80035e2:	4629      	mov	r1, r5
 80035e4:	4638      	mov	r0, r7
 80035e6:	f7ff ff6f 	bl	80034c8 <__ssputs_r>
 80035ea:	3001      	adds	r0, #1
 80035ec:	f000 80a9 	beq.w	8003742 <_svfiprintf_r+0x1c6>
 80035f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035f2:	445a      	add	r2, fp
 80035f4:	9209      	str	r2, [sp, #36]	; 0x24
 80035f6:	f89a 3000 	ldrb.w	r3, [sl]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 80a1 	beq.w	8003742 <_svfiprintf_r+0x1c6>
 8003600:	2300      	movs	r3, #0
 8003602:	f04f 32ff 	mov.w	r2, #4294967295
 8003606:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800360a:	f10a 0a01 	add.w	sl, sl, #1
 800360e:	9304      	str	r3, [sp, #16]
 8003610:	9307      	str	r3, [sp, #28]
 8003612:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003616:	931a      	str	r3, [sp, #104]	; 0x68
 8003618:	4654      	mov	r4, sl
 800361a:	2205      	movs	r2, #5
 800361c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003620:	4850      	ldr	r0, [pc, #320]	; (8003764 <_svfiprintf_r+0x1e8>)
 8003622:	f000 fa67 	bl	8003af4 <memchr>
 8003626:	9a04      	ldr	r2, [sp, #16]
 8003628:	b9d8      	cbnz	r0, 8003662 <_svfiprintf_r+0xe6>
 800362a:	06d0      	lsls	r0, r2, #27
 800362c:	bf44      	itt	mi
 800362e:	2320      	movmi	r3, #32
 8003630:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003634:	0711      	lsls	r1, r2, #28
 8003636:	bf44      	itt	mi
 8003638:	232b      	movmi	r3, #43	; 0x2b
 800363a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800363e:	f89a 3000 	ldrb.w	r3, [sl]
 8003642:	2b2a      	cmp	r3, #42	; 0x2a
 8003644:	d015      	beq.n	8003672 <_svfiprintf_r+0xf6>
 8003646:	4654      	mov	r4, sl
 8003648:	2000      	movs	r0, #0
 800364a:	f04f 0c0a 	mov.w	ip, #10
 800364e:	9a07      	ldr	r2, [sp, #28]
 8003650:	4621      	mov	r1, r4
 8003652:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003656:	3b30      	subs	r3, #48	; 0x30
 8003658:	2b09      	cmp	r3, #9
 800365a:	d94d      	bls.n	80036f8 <_svfiprintf_r+0x17c>
 800365c:	b1b0      	cbz	r0, 800368c <_svfiprintf_r+0x110>
 800365e:	9207      	str	r2, [sp, #28]
 8003660:	e014      	b.n	800368c <_svfiprintf_r+0x110>
 8003662:	eba0 0308 	sub.w	r3, r0, r8
 8003666:	fa09 f303 	lsl.w	r3, r9, r3
 800366a:	4313      	orrs	r3, r2
 800366c:	46a2      	mov	sl, r4
 800366e:	9304      	str	r3, [sp, #16]
 8003670:	e7d2      	b.n	8003618 <_svfiprintf_r+0x9c>
 8003672:	9b03      	ldr	r3, [sp, #12]
 8003674:	1d19      	adds	r1, r3, #4
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	9103      	str	r1, [sp, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	bfbb      	ittet	lt
 800367e:	425b      	neglt	r3, r3
 8003680:	f042 0202 	orrlt.w	r2, r2, #2
 8003684:	9307      	strge	r3, [sp, #28]
 8003686:	9307      	strlt	r3, [sp, #28]
 8003688:	bfb8      	it	lt
 800368a:	9204      	strlt	r2, [sp, #16]
 800368c:	7823      	ldrb	r3, [r4, #0]
 800368e:	2b2e      	cmp	r3, #46	; 0x2e
 8003690:	d10c      	bne.n	80036ac <_svfiprintf_r+0x130>
 8003692:	7863      	ldrb	r3, [r4, #1]
 8003694:	2b2a      	cmp	r3, #42	; 0x2a
 8003696:	d134      	bne.n	8003702 <_svfiprintf_r+0x186>
 8003698:	9b03      	ldr	r3, [sp, #12]
 800369a:	3402      	adds	r4, #2
 800369c:	1d1a      	adds	r2, r3, #4
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	9203      	str	r2, [sp, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	bfb8      	it	lt
 80036a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80036aa:	9305      	str	r3, [sp, #20]
 80036ac:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003768 <_svfiprintf_r+0x1ec>
 80036b0:	2203      	movs	r2, #3
 80036b2:	4650      	mov	r0, sl
 80036b4:	7821      	ldrb	r1, [r4, #0]
 80036b6:	f000 fa1d 	bl	8003af4 <memchr>
 80036ba:	b138      	cbz	r0, 80036cc <_svfiprintf_r+0x150>
 80036bc:	2240      	movs	r2, #64	; 0x40
 80036be:	9b04      	ldr	r3, [sp, #16]
 80036c0:	eba0 000a 	sub.w	r0, r0, sl
 80036c4:	4082      	lsls	r2, r0
 80036c6:	4313      	orrs	r3, r2
 80036c8:	3401      	adds	r4, #1
 80036ca:	9304      	str	r3, [sp, #16]
 80036cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036d0:	2206      	movs	r2, #6
 80036d2:	4826      	ldr	r0, [pc, #152]	; (800376c <_svfiprintf_r+0x1f0>)
 80036d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036d8:	f000 fa0c 	bl	8003af4 <memchr>
 80036dc:	2800      	cmp	r0, #0
 80036de:	d038      	beq.n	8003752 <_svfiprintf_r+0x1d6>
 80036e0:	4b23      	ldr	r3, [pc, #140]	; (8003770 <_svfiprintf_r+0x1f4>)
 80036e2:	bb1b      	cbnz	r3, 800372c <_svfiprintf_r+0x1b0>
 80036e4:	9b03      	ldr	r3, [sp, #12]
 80036e6:	3307      	adds	r3, #7
 80036e8:	f023 0307 	bic.w	r3, r3, #7
 80036ec:	3308      	adds	r3, #8
 80036ee:	9303      	str	r3, [sp, #12]
 80036f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036f2:	4433      	add	r3, r6
 80036f4:	9309      	str	r3, [sp, #36]	; 0x24
 80036f6:	e768      	b.n	80035ca <_svfiprintf_r+0x4e>
 80036f8:	460c      	mov	r4, r1
 80036fa:	2001      	movs	r0, #1
 80036fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003700:	e7a6      	b.n	8003650 <_svfiprintf_r+0xd4>
 8003702:	2300      	movs	r3, #0
 8003704:	f04f 0c0a 	mov.w	ip, #10
 8003708:	4619      	mov	r1, r3
 800370a:	3401      	adds	r4, #1
 800370c:	9305      	str	r3, [sp, #20]
 800370e:	4620      	mov	r0, r4
 8003710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003714:	3a30      	subs	r2, #48	; 0x30
 8003716:	2a09      	cmp	r2, #9
 8003718:	d903      	bls.n	8003722 <_svfiprintf_r+0x1a6>
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0c6      	beq.n	80036ac <_svfiprintf_r+0x130>
 800371e:	9105      	str	r1, [sp, #20]
 8003720:	e7c4      	b.n	80036ac <_svfiprintf_r+0x130>
 8003722:	4604      	mov	r4, r0
 8003724:	2301      	movs	r3, #1
 8003726:	fb0c 2101 	mla	r1, ip, r1, r2
 800372a:	e7f0      	b.n	800370e <_svfiprintf_r+0x192>
 800372c:	ab03      	add	r3, sp, #12
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	462a      	mov	r2, r5
 8003732:	4638      	mov	r0, r7
 8003734:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <_svfiprintf_r+0x1f8>)
 8003736:	a904      	add	r1, sp, #16
 8003738:	f3af 8000 	nop.w
 800373c:	1c42      	adds	r2, r0, #1
 800373e:	4606      	mov	r6, r0
 8003740:	d1d6      	bne.n	80036f0 <_svfiprintf_r+0x174>
 8003742:	89ab      	ldrh	r3, [r5, #12]
 8003744:	065b      	lsls	r3, r3, #25
 8003746:	f53f af2d 	bmi.w	80035a4 <_svfiprintf_r+0x28>
 800374a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800374c:	b01d      	add	sp, #116	; 0x74
 800374e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003752:	ab03      	add	r3, sp, #12
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	462a      	mov	r2, r5
 8003758:	4638      	mov	r0, r7
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <_svfiprintf_r+0x1f8>)
 800375c:	a904      	add	r1, sp, #16
 800375e:	f000 f87d 	bl	800385c <_printf_i>
 8003762:	e7eb      	b.n	800373c <_svfiprintf_r+0x1c0>
 8003764:	08003c08 	.word	0x08003c08
 8003768:	08003c0e 	.word	0x08003c0e
 800376c:	08003c12 	.word	0x08003c12
 8003770:	00000000 	.word	0x00000000
 8003774:	080034c9 	.word	0x080034c9

08003778 <_printf_common>:
 8003778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800377c:	4616      	mov	r6, r2
 800377e:	4699      	mov	r9, r3
 8003780:	688a      	ldr	r2, [r1, #8]
 8003782:	690b      	ldr	r3, [r1, #16]
 8003784:	4607      	mov	r7, r0
 8003786:	4293      	cmp	r3, r2
 8003788:	bfb8      	it	lt
 800378a:	4613      	movlt	r3, r2
 800378c:	6033      	str	r3, [r6, #0]
 800378e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003792:	460c      	mov	r4, r1
 8003794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003798:	b10a      	cbz	r2, 800379e <_printf_common+0x26>
 800379a:	3301      	adds	r3, #1
 800379c:	6033      	str	r3, [r6, #0]
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	0699      	lsls	r1, r3, #26
 80037a2:	bf42      	ittt	mi
 80037a4:	6833      	ldrmi	r3, [r6, #0]
 80037a6:	3302      	addmi	r3, #2
 80037a8:	6033      	strmi	r3, [r6, #0]
 80037aa:	6825      	ldr	r5, [r4, #0]
 80037ac:	f015 0506 	ands.w	r5, r5, #6
 80037b0:	d106      	bne.n	80037c0 <_printf_common+0x48>
 80037b2:	f104 0a19 	add.w	sl, r4, #25
 80037b6:	68e3      	ldr	r3, [r4, #12]
 80037b8:	6832      	ldr	r2, [r6, #0]
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	42ab      	cmp	r3, r5
 80037be:	dc2b      	bgt.n	8003818 <_printf_common+0xa0>
 80037c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037c4:	1e13      	subs	r3, r2, #0
 80037c6:	6822      	ldr	r2, [r4, #0]
 80037c8:	bf18      	it	ne
 80037ca:	2301      	movne	r3, #1
 80037cc:	0692      	lsls	r2, r2, #26
 80037ce:	d430      	bmi.n	8003832 <_printf_common+0xba>
 80037d0:	4649      	mov	r1, r9
 80037d2:	4638      	mov	r0, r7
 80037d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037d8:	47c0      	blx	r8
 80037da:	3001      	adds	r0, #1
 80037dc:	d023      	beq.n	8003826 <_printf_common+0xae>
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	6922      	ldr	r2, [r4, #16]
 80037e2:	f003 0306 	and.w	r3, r3, #6
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	bf14      	ite	ne
 80037ea:	2500      	movne	r5, #0
 80037ec:	6833      	ldreq	r3, [r6, #0]
 80037ee:	f04f 0600 	mov.w	r6, #0
 80037f2:	bf08      	it	eq
 80037f4:	68e5      	ldreq	r5, [r4, #12]
 80037f6:	f104 041a 	add.w	r4, r4, #26
 80037fa:	bf08      	it	eq
 80037fc:	1aed      	subeq	r5, r5, r3
 80037fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003802:	bf08      	it	eq
 8003804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003808:	4293      	cmp	r3, r2
 800380a:	bfc4      	itt	gt
 800380c:	1a9b      	subgt	r3, r3, r2
 800380e:	18ed      	addgt	r5, r5, r3
 8003810:	42b5      	cmp	r5, r6
 8003812:	d11a      	bne.n	800384a <_printf_common+0xd2>
 8003814:	2000      	movs	r0, #0
 8003816:	e008      	b.n	800382a <_printf_common+0xb2>
 8003818:	2301      	movs	r3, #1
 800381a:	4652      	mov	r2, sl
 800381c:	4649      	mov	r1, r9
 800381e:	4638      	mov	r0, r7
 8003820:	47c0      	blx	r8
 8003822:	3001      	adds	r0, #1
 8003824:	d103      	bne.n	800382e <_printf_common+0xb6>
 8003826:	f04f 30ff 	mov.w	r0, #4294967295
 800382a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800382e:	3501      	adds	r5, #1
 8003830:	e7c1      	b.n	80037b6 <_printf_common+0x3e>
 8003832:	2030      	movs	r0, #48	; 0x30
 8003834:	18e1      	adds	r1, r4, r3
 8003836:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003840:	4422      	add	r2, r4
 8003842:	3302      	adds	r3, #2
 8003844:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003848:	e7c2      	b.n	80037d0 <_printf_common+0x58>
 800384a:	2301      	movs	r3, #1
 800384c:	4622      	mov	r2, r4
 800384e:	4649      	mov	r1, r9
 8003850:	4638      	mov	r0, r7
 8003852:	47c0      	blx	r8
 8003854:	3001      	adds	r0, #1
 8003856:	d0e6      	beq.n	8003826 <_printf_common+0xae>
 8003858:	3601      	adds	r6, #1
 800385a:	e7d9      	b.n	8003810 <_printf_common+0x98>

0800385c <_printf_i>:
 800385c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003860:	7e0f      	ldrb	r7, [r1, #24]
 8003862:	4691      	mov	r9, r2
 8003864:	2f78      	cmp	r7, #120	; 0x78
 8003866:	4680      	mov	r8, r0
 8003868:	460c      	mov	r4, r1
 800386a:	469a      	mov	sl, r3
 800386c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800386e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003872:	d807      	bhi.n	8003884 <_printf_i+0x28>
 8003874:	2f62      	cmp	r7, #98	; 0x62
 8003876:	d80a      	bhi.n	800388e <_printf_i+0x32>
 8003878:	2f00      	cmp	r7, #0
 800387a:	f000 80d5 	beq.w	8003a28 <_printf_i+0x1cc>
 800387e:	2f58      	cmp	r7, #88	; 0x58
 8003880:	f000 80c1 	beq.w	8003a06 <_printf_i+0x1aa>
 8003884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003888:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800388c:	e03a      	b.n	8003904 <_printf_i+0xa8>
 800388e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003892:	2b15      	cmp	r3, #21
 8003894:	d8f6      	bhi.n	8003884 <_printf_i+0x28>
 8003896:	a101      	add	r1, pc, #4	; (adr r1, 800389c <_printf_i+0x40>)
 8003898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800389c:	080038f5 	.word	0x080038f5
 80038a0:	08003909 	.word	0x08003909
 80038a4:	08003885 	.word	0x08003885
 80038a8:	08003885 	.word	0x08003885
 80038ac:	08003885 	.word	0x08003885
 80038b0:	08003885 	.word	0x08003885
 80038b4:	08003909 	.word	0x08003909
 80038b8:	08003885 	.word	0x08003885
 80038bc:	08003885 	.word	0x08003885
 80038c0:	08003885 	.word	0x08003885
 80038c4:	08003885 	.word	0x08003885
 80038c8:	08003a0f 	.word	0x08003a0f
 80038cc:	08003935 	.word	0x08003935
 80038d0:	080039c9 	.word	0x080039c9
 80038d4:	08003885 	.word	0x08003885
 80038d8:	08003885 	.word	0x08003885
 80038dc:	08003a31 	.word	0x08003a31
 80038e0:	08003885 	.word	0x08003885
 80038e4:	08003935 	.word	0x08003935
 80038e8:	08003885 	.word	0x08003885
 80038ec:	08003885 	.word	0x08003885
 80038f0:	080039d1 	.word	0x080039d1
 80038f4:	682b      	ldr	r3, [r5, #0]
 80038f6:	1d1a      	adds	r2, r3, #4
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	602a      	str	r2, [r5, #0]
 80038fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003904:	2301      	movs	r3, #1
 8003906:	e0a0      	b.n	8003a4a <_printf_i+0x1ee>
 8003908:	6820      	ldr	r0, [r4, #0]
 800390a:	682b      	ldr	r3, [r5, #0]
 800390c:	0607      	lsls	r7, r0, #24
 800390e:	f103 0104 	add.w	r1, r3, #4
 8003912:	6029      	str	r1, [r5, #0]
 8003914:	d501      	bpl.n	800391a <_printf_i+0xbe>
 8003916:	681e      	ldr	r6, [r3, #0]
 8003918:	e003      	b.n	8003922 <_printf_i+0xc6>
 800391a:	0646      	lsls	r6, r0, #25
 800391c:	d5fb      	bpl.n	8003916 <_printf_i+0xba>
 800391e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003922:	2e00      	cmp	r6, #0
 8003924:	da03      	bge.n	800392e <_printf_i+0xd2>
 8003926:	232d      	movs	r3, #45	; 0x2d
 8003928:	4276      	negs	r6, r6
 800392a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800392e:	230a      	movs	r3, #10
 8003930:	4859      	ldr	r0, [pc, #356]	; (8003a98 <_printf_i+0x23c>)
 8003932:	e012      	b.n	800395a <_printf_i+0xfe>
 8003934:	682b      	ldr	r3, [r5, #0]
 8003936:	6820      	ldr	r0, [r4, #0]
 8003938:	1d19      	adds	r1, r3, #4
 800393a:	6029      	str	r1, [r5, #0]
 800393c:	0605      	lsls	r5, r0, #24
 800393e:	d501      	bpl.n	8003944 <_printf_i+0xe8>
 8003940:	681e      	ldr	r6, [r3, #0]
 8003942:	e002      	b.n	800394a <_printf_i+0xee>
 8003944:	0641      	lsls	r1, r0, #25
 8003946:	d5fb      	bpl.n	8003940 <_printf_i+0xe4>
 8003948:	881e      	ldrh	r6, [r3, #0]
 800394a:	2f6f      	cmp	r7, #111	; 0x6f
 800394c:	bf0c      	ite	eq
 800394e:	2308      	moveq	r3, #8
 8003950:	230a      	movne	r3, #10
 8003952:	4851      	ldr	r0, [pc, #324]	; (8003a98 <_printf_i+0x23c>)
 8003954:	2100      	movs	r1, #0
 8003956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800395a:	6865      	ldr	r5, [r4, #4]
 800395c:	2d00      	cmp	r5, #0
 800395e:	bfa8      	it	ge
 8003960:	6821      	ldrge	r1, [r4, #0]
 8003962:	60a5      	str	r5, [r4, #8]
 8003964:	bfa4      	itt	ge
 8003966:	f021 0104 	bicge.w	r1, r1, #4
 800396a:	6021      	strge	r1, [r4, #0]
 800396c:	b90e      	cbnz	r6, 8003972 <_printf_i+0x116>
 800396e:	2d00      	cmp	r5, #0
 8003970:	d04b      	beq.n	8003a0a <_printf_i+0x1ae>
 8003972:	4615      	mov	r5, r2
 8003974:	fbb6 f1f3 	udiv	r1, r6, r3
 8003978:	fb03 6711 	mls	r7, r3, r1, r6
 800397c:	5dc7      	ldrb	r7, [r0, r7]
 800397e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003982:	4637      	mov	r7, r6
 8003984:	42bb      	cmp	r3, r7
 8003986:	460e      	mov	r6, r1
 8003988:	d9f4      	bls.n	8003974 <_printf_i+0x118>
 800398a:	2b08      	cmp	r3, #8
 800398c:	d10b      	bne.n	80039a6 <_printf_i+0x14a>
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	07de      	lsls	r6, r3, #31
 8003992:	d508      	bpl.n	80039a6 <_printf_i+0x14a>
 8003994:	6923      	ldr	r3, [r4, #16]
 8003996:	6861      	ldr	r1, [r4, #4]
 8003998:	4299      	cmp	r1, r3
 800399a:	bfde      	ittt	le
 800399c:	2330      	movle	r3, #48	; 0x30
 800399e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039a6:	1b52      	subs	r2, r2, r5
 80039a8:	6122      	str	r2, [r4, #16]
 80039aa:	464b      	mov	r3, r9
 80039ac:	4621      	mov	r1, r4
 80039ae:	4640      	mov	r0, r8
 80039b0:	f8cd a000 	str.w	sl, [sp]
 80039b4:	aa03      	add	r2, sp, #12
 80039b6:	f7ff fedf 	bl	8003778 <_printf_common>
 80039ba:	3001      	adds	r0, #1
 80039bc:	d14a      	bne.n	8003a54 <_printf_i+0x1f8>
 80039be:	f04f 30ff 	mov.w	r0, #4294967295
 80039c2:	b004      	add	sp, #16
 80039c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	f043 0320 	orr.w	r3, r3, #32
 80039ce:	6023      	str	r3, [r4, #0]
 80039d0:	2778      	movs	r7, #120	; 0x78
 80039d2:	4832      	ldr	r0, [pc, #200]	; (8003a9c <_printf_i+0x240>)
 80039d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	6829      	ldr	r1, [r5, #0]
 80039dc:	061f      	lsls	r7, r3, #24
 80039de:	f851 6b04 	ldr.w	r6, [r1], #4
 80039e2:	d402      	bmi.n	80039ea <_printf_i+0x18e>
 80039e4:	065f      	lsls	r7, r3, #25
 80039e6:	bf48      	it	mi
 80039e8:	b2b6      	uxthmi	r6, r6
 80039ea:	07df      	lsls	r7, r3, #31
 80039ec:	bf48      	it	mi
 80039ee:	f043 0320 	orrmi.w	r3, r3, #32
 80039f2:	6029      	str	r1, [r5, #0]
 80039f4:	bf48      	it	mi
 80039f6:	6023      	strmi	r3, [r4, #0]
 80039f8:	b91e      	cbnz	r6, 8003a02 <_printf_i+0x1a6>
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	f023 0320 	bic.w	r3, r3, #32
 8003a00:	6023      	str	r3, [r4, #0]
 8003a02:	2310      	movs	r3, #16
 8003a04:	e7a6      	b.n	8003954 <_printf_i+0xf8>
 8003a06:	4824      	ldr	r0, [pc, #144]	; (8003a98 <_printf_i+0x23c>)
 8003a08:	e7e4      	b.n	80039d4 <_printf_i+0x178>
 8003a0a:	4615      	mov	r5, r2
 8003a0c:	e7bd      	b.n	800398a <_printf_i+0x12e>
 8003a0e:	682b      	ldr	r3, [r5, #0]
 8003a10:	6826      	ldr	r6, [r4, #0]
 8003a12:	1d18      	adds	r0, r3, #4
 8003a14:	6961      	ldr	r1, [r4, #20]
 8003a16:	6028      	str	r0, [r5, #0]
 8003a18:	0635      	lsls	r5, r6, #24
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	d501      	bpl.n	8003a22 <_printf_i+0x1c6>
 8003a1e:	6019      	str	r1, [r3, #0]
 8003a20:	e002      	b.n	8003a28 <_printf_i+0x1cc>
 8003a22:	0670      	lsls	r0, r6, #25
 8003a24:	d5fb      	bpl.n	8003a1e <_printf_i+0x1c2>
 8003a26:	8019      	strh	r1, [r3, #0]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	4615      	mov	r5, r2
 8003a2c:	6123      	str	r3, [r4, #16]
 8003a2e:	e7bc      	b.n	80039aa <_printf_i+0x14e>
 8003a30:	682b      	ldr	r3, [r5, #0]
 8003a32:	2100      	movs	r1, #0
 8003a34:	1d1a      	adds	r2, r3, #4
 8003a36:	602a      	str	r2, [r5, #0]
 8003a38:	681d      	ldr	r5, [r3, #0]
 8003a3a:	6862      	ldr	r2, [r4, #4]
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	f000 f859 	bl	8003af4 <memchr>
 8003a42:	b108      	cbz	r0, 8003a48 <_printf_i+0x1ec>
 8003a44:	1b40      	subs	r0, r0, r5
 8003a46:	6060      	str	r0, [r4, #4]
 8003a48:	6863      	ldr	r3, [r4, #4]
 8003a4a:	6123      	str	r3, [r4, #16]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a52:	e7aa      	b.n	80039aa <_printf_i+0x14e>
 8003a54:	462a      	mov	r2, r5
 8003a56:	4649      	mov	r1, r9
 8003a58:	4640      	mov	r0, r8
 8003a5a:	6923      	ldr	r3, [r4, #16]
 8003a5c:	47d0      	blx	sl
 8003a5e:	3001      	adds	r0, #1
 8003a60:	d0ad      	beq.n	80039be <_printf_i+0x162>
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	079b      	lsls	r3, r3, #30
 8003a66:	d413      	bmi.n	8003a90 <_printf_i+0x234>
 8003a68:	68e0      	ldr	r0, [r4, #12]
 8003a6a:	9b03      	ldr	r3, [sp, #12]
 8003a6c:	4298      	cmp	r0, r3
 8003a6e:	bfb8      	it	lt
 8003a70:	4618      	movlt	r0, r3
 8003a72:	e7a6      	b.n	80039c2 <_printf_i+0x166>
 8003a74:	2301      	movs	r3, #1
 8003a76:	4632      	mov	r2, r6
 8003a78:	4649      	mov	r1, r9
 8003a7a:	4640      	mov	r0, r8
 8003a7c:	47d0      	blx	sl
 8003a7e:	3001      	adds	r0, #1
 8003a80:	d09d      	beq.n	80039be <_printf_i+0x162>
 8003a82:	3501      	adds	r5, #1
 8003a84:	68e3      	ldr	r3, [r4, #12]
 8003a86:	9903      	ldr	r1, [sp, #12]
 8003a88:	1a5b      	subs	r3, r3, r1
 8003a8a:	42ab      	cmp	r3, r5
 8003a8c:	dcf2      	bgt.n	8003a74 <_printf_i+0x218>
 8003a8e:	e7eb      	b.n	8003a68 <_printf_i+0x20c>
 8003a90:	2500      	movs	r5, #0
 8003a92:	f104 0619 	add.w	r6, r4, #25
 8003a96:	e7f5      	b.n	8003a84 <_printf_i+0x228>
 8003a98:	08003c19 	.word	0x08003c19
 8003a9c:	08003c2a 	.word	0x08003c2a

08003aa0 <memmove>:
 8003aa0:	4288      	cmp	r0, r1
 8003aa2:	b510      	push	{r4, lr}
 8003aa4:	eb01 0402 	add.w	r4, r1, r2
 8003aa8:	d902      	bls.n	8003ab0 <memmove+0x10>
 8003aaa:	4284      	cmp	r4, r0
 8003aac:	4623      	mov	r3, r4
 8003aae:	d807      	bhi.n	8003ac0 <memmove+0x20>
 8003ab0:	1e43      	subs	r3, r0, #1
 8003ab2:	42a1      	cmp	r1, r4
 8003ab4:	d008      	beq.n	8003ac8 <memmove+0x28>
 8003ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003aba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003abe:	e7f8      	b.n	8003ab2 <memmove+0x12>
 8003ac0:	4601      	mov	r1, r0
 8003ac2:	4402      	add	r2, r0
 8003ac4:	428a      	cmp	r2, r1
 8003ac6:	d100      	bne.n	8003aca <memmove+0x2a>
 8003ac8:	bd10      	pop	{r4, pc}
 8003aca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ad2:	e7f7      	b.n	8003ac4 <memmove+0x24>

08003ad4 <_sbrk_r>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	4d05      	ldr	r5, [pc, #20]	; (8003af0 <_sbrk_r+0x1c>)
 8003ada:	4604      	mov	r4, r0
 8003adc:	4608      	mov	r0, r1
 8003ade:	602b      	str	r3, [r5, #0]
 8003ae0:	f7fc ff62 	bl	80009a8 <_sbrk>
 8003ae4:	1c43      	adds	r3, r0, #1
 8003ae6:	d102      	bne.n	8003aee <_sbrk_r+0x1a>
 8003ae8:	682b      	ldr	r3, [r5, #0]
 8003aea:	b103      	cbz	r3, 8003aee <_sbrk_r+0x1a>
 8003aec:	6023      	str	r3, [r4, #0]
 8003aee:	bd38      	pop	{r3, r4, r5, pc}
 8003af0:	2000026c 	.word	0x2000026c

08003af4 <memchr>:
 8003af4:	4603      	mov	r3, r0
 8003af6:	b510      	push	{r4, lr}
 8003af8:	b2c9      	uxtb	r1, r1
 8003afa:	4402      	add	r2, r0
 8003afc:	4293      	cmp	r3, r2
 8003afe:	4618      	mov	r0, r3
 8003b00:	d101      	bne.n	8003b06 <memchr+0x12>
 8003b02:	2000      	movs	r0, #0
 8003b04:	e003      	b.n	8003b0e <memchr+0x1a>
 8003b06:	7804      	ldrb	r4, [r0, #0]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	428c      	cmp	r4, r1
 8003b0c:	d1f6      	bne.n	8003afc <memchr+0x8>
 8003b0e:	bd10      	pop	{r4, pc}

08003b10 <memcpy>:
 8003b10:	440a      	add	r2, r1
 8003b12:	4291      	cmp	r1, r2
 8003b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b18:	d100      	bne.n	8003b1c <memcpy+0xc>
 8003b1a:	4770      	bx	lr
 8003b1c:	b510      	push	{r4, lr}
 8003b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b22:	4291      	cmp	r1, r2
 8003b24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b28:	d1f9      	bne.n	8003b1e <memcpy+0xe>
 8003b2a:	bd10      	pop	{r4, pc}

08003b2c <_realloc_r>:
 8003b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b30:	4680      	mov	r8, r0
 8003b32:	4614      	mov	r4, r2
 8003b34:	460e      	mov	r6, r1
 8003b36:	b921      	cbnz	r1, 8003b42 <_realloc_r+0x16>
 8003b38:	4611      	mov	r1, r2
 8003b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b3e:	f7ff bc37 	b.w	80033b0 <_malloc_r>
 8003b42:	b92a      	cbnz	r2, 8003b50 <_realloc_r+0x24>
 8003b44:	f7ff fbcc 	bl	80032e0 <_free_r>
 8003b48:	4625      	mov	r5, r4
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b50:	f000 f81b 	bl	8003b8a <_malloc_usable_size_r>
 8003b54:	4284      	cmp	r4, r0
 8003b56:	4607      	mov	r7, r0
 8003b58:	d802      	bhi.n	8003b60 <_realloc_r+0x34>
 8003b5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b5e:	d812      	bhi.n	8003b86 <_realloc_r+0x5a>
 8003b60:	4621      	mov	r1, r4
 8003b62:	4640      	mov	r0, r8
 8003b64:	f7ff fc24 	bl	80033b0 <_malloc_r>
 8003b68:	4605      	mov	r5, r0
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d0ed      	beq.n	8003b4a <_realloc_r+0x1e>
 8003b6e:	42bc      	cmp	r4, r7
 8003b70:	4622      	mov	r2, r4
 8003b72:	4631      	mov	r1, r6
 8003b74:	bf28      	it	cs
 8003b76:	463a      	movcs	r2, r7
 8003b78:	f7ff ffca 	bl	8003b10 <memcpy>
 8003b7c:	4631      	mov	r1, r6
 8003b7e:	4640      	mov	r0, r8
 8003b80:	f7ff fbae 	bl	80032e0 <_free_r>
 8003b84:	e7e1      	b.n	8003b4a <_realloc_r+0x1e>
 8003b86:	4635      	mov	r5, r6
 8003b88:	e7df      	b.n	8003b4a <_realloc_r+0x1e>

08003b8a <_malloc_usable_size_r>:
 8003b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b8e:	1f18      	subs	r0, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bfbc      	itt	lt
 8003b94:	580b      	ldrlt	r3, [r1, r0]
 8003b96:	18c0      	addlt	r0, r0, r3
 8003b98:	4770      	bx	lr
	...

08003b9c <_init>:
 8003b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9e:	bf00      	nop
 8003ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba2:	bc08      	pop	{r3}
 8003ba4:	469e      	mov	lr, r3
 8003ba6:	4770      	bx	lr

08003ba8 <_fini>:
 8003ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003baa:	bf00      	nop
 8003bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bae:	bc08      	pop	{r3}
 8003bb0:	469e      	mov	lr, r3
 8003bb2:	4770      	bx	lr
